<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DynamicData</name>
    </assembly>
    <members>
        <member name="T:DynamicData.Binding.AbstractNotifyPropertyChanged">
            <summary>
            Base class for implementing notify property changes
            </summary>
        </member>
        <member name="E:DynamicData.Binding.AbstractNotifyPropertyChanged.PropertyChanged">
            <summary>
            Occurs when a property vale has changed.
            </summary>
        </member>
        <member name="M:DynamicData.Binding.AbstractNotifyPropertyChanged.OnPropertyChanged(System.String)">
            <summary>
            Invokes on property changed
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:DynamicData.Binding.AbstractNotifyPropertyChanged.SetAndRaise``1(``0@,``0,System.String)">
            <summary>
            If the value has changed, sets referenced backing field and raise notify property changed
            </summary>
            <typeparam name="T"></typeparam>
            <param name="backingField">The backing field.</param>
            <param name="newValue">The new value.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="T:DynamicData.Binding.NotifyPropertyChangedEx">
            <summary>
            Property changes notification
            </summary>
        </member>
        <member name="M:DynamicData.Binding.NotifyPropertyChangedEx.ObservePropertyValue``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Observes property changes for the sepcifed property, starting with the current value
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="source">The source.</param>
            <param name="propertyAccessor">The property accessor.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">propertyAccessor</exception>
        </member>
        <member name="M:DynamicData.Binding.NotifyPropertyChangedEx.Value``2(System.IObservable{DynamicData.Binding.PropertyValue{``0,``1}})">
            <summary>
            Selects the value from the property changed notification
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="source">The source.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:DynamicData.Binding.NotifyPropertyChangedEx.ObservePropertyChanges``1(``0)">
            <summary>
            Observes property changed for the specified object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="T:DynamicData.Binding.PropertyValue`2">
            <summary>
            Container holding sender and latest property value
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:DynamicData.Binding.PropertyValue`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicData.Binding.PropertyValue`2"/> class.
            </summary>
            <param name="sender">The sender.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:DynamicData.Binding.PropertyValue`2.Sender">
            <summary>
            The Sender
            </summary>
        </member>
        <member name="P:DynamicData.Binding.PropertyValue`2.Value">
            <summary>
            Lastest observed value
            </summary>
        </member>
        <member name="M:DynamicData.Binding.PropertyValue`2.Equals(DynamicData.Binding.PropertyValue{`0,`1})">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.Binding.PropertyValue`2.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DynamicData.Binding.PropertyValue`2.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:DynamicData.Binding.PropertyValue`2.op_Equality(DynamicData.Binding.PropertyValue{`0,`1},DynamicData.Binding.PropertyValue{`0,`1})">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:DynamicData.Binding.PropertyValue`2.op_Inequality(DynamicData.Binding.PropertyValue{`0,`1},DynamicData.Binding.PropertyValue{`0,`1})">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:DynamicData.Binding.PropertyValue`2.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:DynamicData.Binding.IEvaluateAware">
            <summary>
            Implement on an object and use in conjunction with InvokeEvaluate operator
            to make an object aware of any evaluates
            </summary>
        </member>
        <member name="M:DynamicData.Binding.IEvaluateAware.Evaluate">
            <summary>
            Evaluate method
            </summary>
        </member>
        <member name="T:DynamicData.Binding.IIndexAware">
            <summary>
            Implement on an object and use in conjunction with UpdateIndex operator
            to make an object aware of it's sorted index
            </summary>
        </member>
        <member name="P:DynamicData.Binding.IIndexAware.Index">
            <summary>
            Gets or sets the index.
            </summary>
            <value>
            The index.
            </value>
        </member>
        <member name="T:DynamicData.Binding.IObservableCollection`1">
            <summary>
            An override of observable collection which allows the suspension of notifications
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:DynamicData.Binding.IObservableCollection`1.SuspendNotifications">
            <summary>
            Suspends notifications. When disposed, a reset notification is fired
            </summary>
            <returns></returns>
        </member>
        <member name="M:DynamicData.Binding.IObservableCollection`1.SuspendCount">
            <summary>
            Suspends count notifications
            </summary>
            <returns></returns>
        </member>
        <member name="M:DynamicData.Binding.IObservableCollection`1.Move(System.Int32,System.Int32)">
            <summary>
            Moves the item at the specified index to a new location in the collection.
            </summary>
            <param name="oldIndex">The zero-based index specifying the location of the item to be moved.</param>
            <param name="newIndex">The zero-based index specifying the new location of the item.</param>
        </member>
        <member name="M:DynamicData.Binding.IObservableCollection`1.Load(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Clears the list and Loads the specified items.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="T:DynamicData.Binding.IObservableCollectionAdaptor`2">
            <summary>
            Represents an adaptor which is used to update observable collection from
            a changeset stream
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
        </member>
        <member name="M:DynamicData.Binding.IObservableCollectionAdaptor`2.Adapt(DynamicData.IChangeSet{`0,`1},DynamicData.Binding.IObservableCollection{`0})">
            <summary>
            Maintains the specified collection from the changes
            </summary>
            <param name="changes">The changes.</param>
            <param name="collection">The collection.</param>
        </member>
        <member name="T:DynamicData.Binding.ISortedObservableCollectionAdaptor`2">
            <summary>
            Represents an adaptor which is used to update observable collection from
            a sorted change set stream
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
        </member>
        <member name="M:DynamicData.Binding.ISortedObservableCollectionAdaptor`2.Adapt(DynamicData.ISortedChangeSet{`0,`1},DynamicData.Binding.IObservableCollection{`0})">
            <summary>
            Maintains the specified collection from the changes
            </summary>
            <param name="changes">The changes.</param>
            <param name="collection">The collection.</param>
        </member>
        <member name="T:DynamicData.Binding.ObservableCollectionAdaptor`1">
            <summary>
            Adaptor to relect a change set into an observable list
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:DynamicData.Binding.ObservableCollectionAdaptor`1.#ctor(DynamicData.Binding.IObservableCollection{`0},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object" /> class.
            </summary>
            <param name="collection">The collection.</param>
            <param name="refreshThreshold">The refresh threshold.</param>
            <exception cref="T:System.ArgumentNullException">collection</exception>
        </member>
        <member name="M:DynamicData.Binding.ObservableCollectionAdaptor`1.Adapt(DynamicData.IChangeSet{`0})">
            <summary>
            Maintains the specified collection from the changes
            </summary>
            <param name="changes">The changes.</param>
        </member>
        <member name="T:DynamicData.Binding.ObservableCollectionAdaptor`2">
            <summary>
            Represents an adaptor which is used to update observable collection from
            a changeset stream
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
        </member>
        <member name="M:DynamicData.Binding.ObservableCollectionAdaptor`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="M:DynamicData.Binding.ObservableCollectionAdaptor`2.Adapt(DynamicData.IChangeSet{`0,`1},DynamicData.Binding.IObservableCollection{`0})">
            <summary>
            Maintains the specified collection from the changes
            </summary>
            <param name="changes">The changes.</param>
            <param name="collection">The collection.</param>
        </member>
        <member name="T:DynamicData.Binding.ObservableCollectionEx">
            <summary>
            Extensions to convert an observable collection into a dynamic stream
            </summary>
        </member>
        <member name="M:DynamicData.Binding.ObservableCollectionEx.ToObservableChangeSet``1(System.Collections.ObjectModel.ObservableCollection{``0})">
            <summary>
            Convert an observable collection into an observable change set
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="source">The source.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:DynamicData.Binding.ObservableCollectionEx.ToObservableChangeSet``2(System.Collections.ObjectModel.ObservableCollection{``0},System.Func{``0,``1})">
            <summary>
            Convert an observable collection into a dynamic stream of change sets
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="keySelector">The key selector.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source
            or
            keySelector</exception>
        </member>
        <member name="T:DynamicData.Binding.ObservableCollectionExtended`1">
            <summary>
            An override of observable collection which allows the suspension of notifications
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:DynamicData.Binding.ObservableCollectionExtended`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> class.
            </summary>
        </member>
        <member name="M:DynamicData.Binding.ObservableCollectionExtended`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> class that contains elements copied from the specified list.
            </summary>
            <param name="list">The list from which the elements are copied.</param><exception cref="T:System.ArgumentNullException">The <paramref name="list"/> parameter cannot be null.</exception>
        </member>
        <member name="M:DynamicData.Binding.ObservableCollectionExtended`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> class that contains elements copied from the specified collection.
            </summary>
            <param name="collection">The collection from which the elements are copied.</param><exception cref="T:System.ArgumentNullException">The <paramref name="collection"/> parameter cannot be null.</exception>
        </member>
        <member name="M:DynamicData.Binding.ObservableCollectionExtended`1.SuspendNotifications">
            <summary>
            Suspends notifications. When disposed, a reset notification is fired
            </summary>
            <returns></returns>
        </member>
        <member name="M:DynamicData.Binding.ObservableCollectionExtended`1.SuspendCount">
            <summary>
            Suspends count notifications
            </summary>
            <returns></returns>
        </member>
        <member name="M:DynamicData.Binding.ObservableCollectionExtended`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:PropertyChanged" /> event.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:DynamicData.Binding.ObservableCollectionExtended`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:CollectionChanged" /> event.
            </summary>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:DynamicData.Binding.ObservableCollectionExtended`1.Load(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Clears the list and Loads the specified items.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="T:DynamicData.Binding.SortDirection">
            <summary>
            Sort direction
            </summary>
        </member>
        <member name="F:DynamicData.Binding.SortDirection.Ascending">
            <summary>
            Sort items ascending
            </summary>
        </member>
        <member name="F:DynamicData.Binding.SortDirection.Descending">
            <summary>
            Sort items descending
            </summary>
        </member>
        <member name="T:DynamicData.Binding.SortedObservableCollectionAdaptor`2">
            <summary>
            Represents an adaptor which is used to update observable collection from
            a sorted change set stream
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
        </member>
        <member name="M:DynamicData.Binding.SortedObservableCollectionAdaptor`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object" /> class.
            </summary>
            <param name="refreshThreshold">The number of changes before a Reset event is used</param>
        </member>
        <member name="M:DynamicData.Binding.SortedObservableCollectionAdaptor`2.Adapt(DynamicData.ISortedChangeSet{`0,`1},DynamicData.Binding.IObservableCollection{`0})">
            <summary>
            Maintains the specified collection from the changes
            </summary>
            <param name="changes">The changes.</param>
            <param name="collection">The collection.</param>
        </member>
        <member name="T:DynamicData.Binding.SortExpression`1">
            <summary>
            A value expression with sort direction
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:DynamicData.Binding.SortExpression`1.#ctor(System.Func{`0,System.IComparable},DynamicData.Binding.SortDirection)">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicData.Binding.SortExpression`1"/> class.
            </summary>
            <param name="expression">The expression.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="P:DynamicData.Binding.SortExpression`1.Direction">
            <summary>
            Gets or sets the direction.
            </summary>
        </member>
        <member name="P:DynamicData.Binding.SortExpression`1.Expression">
            <summary>
            Gets or sets the expression.
            </summary>
        </member>
        <member name="T:DynamicData.Binding.SortExpressionComparer`1">
            <summary>
            Generic sort expression to help create inline sorting for the .Sort(IComparer comparer) operator
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:DynamicData.Binding.SortExpressionComparer`1.Compare(`0,`0)">
            <summary>
            Compares x and y
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.Binding.SortExpressionComparer`1.Ascending(System.Func{`0,System.IComparable})">
            <summary>
            Create an ascending sort expression
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.Binding.SortExpressionComparer`1.Descending(System.Func{`0,System.IComparable})">
            <summary>
            Create an descending sort expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.Binding.SortExpressionComparer`1.ThenByAscending(System.Func{`0,System.IComparable})">
            <summary>
            Adds an additional ascending sort expression
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.Binding.SortExpressionComparer`1.ThenByDescending(System.Func{`0,System.IComparable})">
            <summary>
             Adds an additional desccending sort expression
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="T:DynamicData.AggregationEx">
            <summary>
            Aggregation extensions
            </summary>
        </member>
        <member name="M:DynamicData.AggregationEx.ForAggregation``2(System.IObservable{DynamicData.IChangeSet{``0,``1}})">
            <summary>
            Fors the aggregation.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.AggregationEx.ForScan``3(System.IObservable{DynamicData.IChangeSet{``0,``1}},``2,System.Func{System.Collections.Generic.IEnumerable{DynamicData.AggregateItem{``0,``1}},``2})">
            <summary>
            Fors the scan.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TAccumulate">The type of the accumulate.</typeparam>
            <param name="source">The source.</param>
            <param name="seed">The seed.</param>
            <param name="accumulator">The accumulator.</param>
            <returns></returns>
        </member>
        <member name="T:DynamicData.IChangeSet">
            <summary>
            Base interface represeting a set of changed
            </summary>
        </member>
        <member name="P:DynamicData.IChangeSet.Adds">
            <summary>
                Gets the number of additions
            </summary>
        </member>
        <member name="P:DynamicData.IChangeSet.Updates">
            <summary>
                Gets the number of updates
            </summary>
        </member>
        <member name="P:DynamicData.IChangeSet.Removes">
            <summary>
                Gets the number of removes
            </summary>
        </member>
        <member name="P:DynamicData.IChangeSet.Moves">
            <summary>
                Gets the number of moves
            </summary>
        </member>
        <member name="P:DynamicData.IChangeSet.Count">
            <summary>
                The total update count
            </summary>
        </member>
        <member name="P:DynamicData.IChangeSet.Capacity">
            <summary>
            Gets or sets the capacity of the change set
            </summary>
            <value>
            The capacity.
            </value>
        </member>
        <member name="T:DynamicData.Kernel.ItemWithIndex`1">
            <summary>
            Container for an item and it's index from a list
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:DynamicData.Kernel.ItemWithIndex`1.Item">
            <summary>
            Gets the item.
            </summary>
        </member>
        <member name="P:DynamicData.Kernel.ItemWithIndex`1.Index">
            <summary>
            Gets the index.
            </summary>
        </member>
        <member name="M:DynamicData.Kernel.ItemWithIndex`1.#ctor(`0,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicData.Kernel.ItemWithIndex`1"/> class.
            </summary>
            <param name="item">The item.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:DynamicData.Kernel.ItemWithIndex`1.Equals(DynamicData.Kernel.ItemWithIndex{`0})">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.Kernel.ItemWithIndex`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DynamicData.Kernel.ItemWithIndex`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:DynamicData.Kernel.ItemWithIndex`1.op_Equality(DynamicData.Kernel.ItemWithIndex{`0},DynamicData.Kernel.ItemWithIndex{`0})">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:DynamicData.Kernel.ItemWithIndex`1.op_Inequality(DynamicData.Kernel.ItemWithIndex{`0},DynamicData.Kernel.ItemWithIndex{`0})">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:DynamicData.Kernel.ItemWithIndex`1.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:DynamicData.Kernel.DoubleCheck`1">
            <summary>
            Very simple, primitive yet light weight lazy loader
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:DynamicData.Kernel.DoubleCheck`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicData.Kernel.DoubleCheck`1"/> class.
            </summary>
            <param name="factory">The factory.</param>
            <exception cref="T:System.ArgumentNullException">factory</exception>
        </member>
        <member name="P:DynamicData.Kernel.DoubleCheck`1.Value">
            <summary>
            Gets the value. Factory is execute when first called
            </summary>
        </member>
        <member name="T:DynamicData.Kernel.EnumerableEx">
            <summary>
            Enumerable extensions
            </summary>
        </member>
        <member name="M:DynamicData.Kernel.EnumerableEx.WithIndex``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns an object with it's current index.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="T:DynamicData.Kernel.InternalEx">
            <summary>
            
            </summary>
        </member>
        <member name="M:DynamicData.Kernel.InternalEx.RetryWithBackOff``2(System.IObservable{``0},System.Func{``1,System.Int32,System.Nullable{System.TimeSpan}})">
            <summary>
            Retries the with back off.
            </summary>
            <remarks>
            With big thanks.  I took this from 
            http://social.msdn.microsoft.com/Forums/en-US/af43b14e-fb00-42d4-8fb1-5c45862f7796/recursive-async-web-requestresponse-what-is-best-practice-3rd-try
            </remarks>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TException">The type of the exception.</typeparam>
            <param name="source">The source.</param>
            <param name="backOffStrategy">The back off strategy.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.Kernel.InternalEx.ScheduleRecurringAction(System.Reactive.Concurrency.IScheduler,System.TimeSpan,System.Action)">
            <summary>
            Schedules a recurring action.
            </summary>
            <remarks>
             I took this from 
            http://www.zerobugbuild.com/?p=259
            </remarks>
            <param name="scheduler">The scheduler.</param>
            <param name="interval">The interval.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.Kernel.InternalEx.ScheduleRecurringAction(System.Reactive.Concurrency.IScheduler,System.Func{System.TimeSpan},System.Action)">
            <summary>
            Schedules a recurring action.
            </summary>
            <remarks>
             I took this from 
            
            http://www.zerobugbuild.com/?p=259
            
            and adapted it to receive 
            </remarks>
            <param name="scheduler">The scheduler.</param>
            <param name="interval">The interval.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="T:DynamicData.Kernel.ItemWithValue`2">
            <summary>
            Container for an item and it's Value from a list
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="P:DynamicData.Kernel.ItemWithValue`2.Item">
            <summary>
            Gets the item.
            </summary>
        </member>
        <member name="P:DynamicData.Kernel.ItemWithValue`2.Value">
            <summary>
            Gets the Value.
            </summary>
        </member>
        <member name="M:DynamicData.Kernel.ItemWithValue`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicData.Kernel.ItemWithIndex`1"/> class.
            </summary>
            <param name="item">The item.</param>
            <param name="value">The Value.</param>
        </member>
        <member name="M:DynamicData.Kernel.ItemWithValue`2.Equals(DynamicData.Kernel.ItemWithValue{`0,`1})">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.Kernel.ItemWithValue`2.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DynamicData.Kernel.ItemWithValue`2.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:DynamicData.Kernel.ItemWithValue`2.op_Equality(DynamicData.Kernel.ItemWithValue{`0,`1},DynamicData.Kernel.ItemWithValue{`0,`1})">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:DynamicData.Kernel.ItemWithValue`2.op_Inequality(DynamicData.Kernel.ItemWithValue{`0,`1},DynamicData.Kernel.ItemWithValue{`0,`1})">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:DynamicData.Kernel.ItemWithValue`2.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:DynamicData.Kernel.Optional">
            <summary>
            Optional factory class
            </summary>
        </member>
        <member name="M:DynamicData.Kernel.Optional.Some``1(``0)">
             <summary>
            Wraps the specified value in an Optional container
             </summary>
             <typeparam name="T"></typeparam>
             <param name="value">The value.</param>
             <returns></returns>
        </member>
        <member name="M:DynamicData.Kernel.Optional.None``1">
            <summary>
            Returns an None optional value for the specified type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:DynamicData.Kernel.Optional`1">
            <summary>
            The equivalent of a nullable type which works on value and reference types
            </summary>
            <typeparam name="T">The underlying value type of the <see cref="T:System.Nullable`1"/> generic type.</typeparam><filterpriority>1</filterpriority>
        </member>
        <member name="F:DynamicData.Kernel.Optional`1.None">
            <summary>
            The default valueless optional
            </summary>
        </member>
        <member name="M:DynamicData.Kernel.Optional`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicData.Kernel.Optional`1"/> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:DynamicData.Kernel.Optional`1.Create(`0)">
            <summary>
            Creates the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="P:DynamicData.Kernel.Optional`1.HasValue">
            <summary>
            Gets a value indicating whether the current <see cref="T:System.Nullable`1"/> object has a value.
            </summary>
            
            <returns>
            true if the current <see cref="T:System.Nullable`1"/> object has a value; false if the current <see cref="T:System.Nullable`1"/> object has no value.
            </returns>
        </member>
        <member name="P:DynamicData.Kernel.Optional`1.Value">
            <summary>
            Gets the value of the current <see cref="T:System.Nullable`1"/> value.
            </summary>
            
            <returns>
            The value of the current <see cref="T:System.Nullable`1"/> object if the <see cref="P:System.Nullable`1.HasValue"/> property is true. An exception is thrown if the <see cref="P:System.Nullable`1.HasValue"/> property is false.
            </returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Nullable`1.HasValue"/> property is false.</exception>
        </member>
        <member name="M:DynamicData.Kernel.Optional`1.op_Implicit(`0)~DynamicData.Kernel.Optional{`0}">
            <summary>
            Implicit cast from the vale to the optional
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.Kernel.Optional`1.op_Explicit(DynamicData.Kernel.Optional{`0})~`0">
            <summary>
            Explicit cast from option to valiue
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.Kernel.Optional`1.op_Equality(DynamicData.Kernel.Optional{`0},DynamicData.Kernel.Optional{`0})">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:DynamicData.Kernel.Optional`1.op_Inequality(DynamicData.Kernel.Optional{`0},DynamicData.Kernel.Optional{`0})">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:DynamicData.Kernel.Optional`1.Equals(DynamicData.Kernel.Optional{`0})">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>s
            <returns></returns>
        </member>
        <member name="M:DynamicData.Kernel.Optional`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DynamicData.Kernel.Optional`1.GetHashCode">
            <summary>
            Retrieves the hash code of the object returned by the <see cref="P:System.Nullable`1.Value"/> property.
            </summary>
            
            <returns>
            The hash code of the object returned by the <see cref="P:System.Nullable`1.Value"/> property if the <see cref="P:System.Nullable`1.HasValue"/> property is true, or zero if the <see cref="P:System.Nullable`1.HasValue"/> property is false.
            </returns>
        </member>
        <member name="M:DynamicData.Kernel.Optional`1.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:DynamicData.Kernel.OptionElse">
            <summary>
            Continuation container used for the else optator on an option object.
            </summary>
        </member>
        <member name="M:DynamicData.Kernel.OptionElse.Else(System.Action)">
            <summary>
            Invokes the specified action when an option has no value.
            </summary>
            <param name="action">The action.</param>
            <exception cref="T:System.ArgumentNullException">action</exception>
        </member>
        <member name="T:DynamicData.Kernel.OptionExtensions">
            <summary>
            Extensions for optional
            </summary>
        </member>
        <member name="M:DynamicData.Kernel.OptionExtensions.ValueOr``1(DynamicData.Kernel.Optional{``0},System.Func{``0})">
            <summary>
            Returns the value if the optional has a value, otherwise returns the result of the value selector
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="valueSelector">The value selector.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">valueSelector</exception>
        </member>
        <member name="M:DynamicData.Kernel.OptionExtensions.ValueOrDefault``1(DynamicData.Kernel.Optional{``0})">
            <summary>
            Returns the value if the optional has a value, otherwise returns the default value of T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.Kernel.OptionExtensions.ValueOrThrow``1(DynamicData.Kernel.Optional{``0},System.Func{System.Exception})">
            <summary>
            Returns the value if the optional has a value, otherwise throws an exception as specified by the exception generator
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="exceptionGenerator">The exception generator.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">exceptionGenerator</exception>
        </member>
        <member name="M:DynamicData.Kernel.OptionExtensions.ConvertOr``2(DynamicData.Kernel.Optional{``0},System.Func{``0,``1},System.Func{``1})">
            <summary>
            Converts the option value if it has a value, otherwise returns the result of the fallback converter
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <param name="source">The source.</param>
            <param name="converter">The converter.</param>
            <param name="fallbackConverter">The fallback converter.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            converter
            or
            fallbackConverter
            </exception>
        </member>
        <member name="M:DynamicData.Kernel.OptionExtensions.Convert``2(DynamicData.Kernel.Optional{``0},System.Func{``0,``1})">
            <summary>
            Converts the specified source.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <param name="source">The source.</param>
            <param name="converter">The converter.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">converter</exception>
        </member>
        <member name="M:DynamicData.Kernel.OptionExtensions.SelectValues``1(System.Collections.Generic.IEnumerable{DynamicData.Kernel.Optional{``0}})">
            <summary>
            Filters where Optional<typeparam name="T"></typeparam> has a value
            and return the values only
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.Kernel.OptionExtensions.Lookup``2(System.Collections.Generic.IDictionary{``1,``0},``1)">
            <summary>
            Overloads a TryGetValue of the dictionary wrapping the result as an Optional<typeparam>
                    <name>&amp;gt;TValue</name>
                </typeparam>
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.Kernel.OptionExtensions.RemoveIfContained``2(System.Collections.Generic.IDictionary{``1,``0},``1)">
            <summary>
            Removes item if contained in the cache
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.Kernel.OptionExtensions.FirstOrOptional``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Overloads Enumerable.FirstOrDefault() and wraps the result in a Optional<typeparam>
                    <name>&amp;gt;T</name>
                </typeparam> container
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="selector">The selector.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.Kernel.OptionExtensions.IfHasValue``1(DynamicData.Kernel.Optional{``0},System.Action{``0})">
            <summary>
            Invokes the specified action when 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="T:DynamicData.Kernel.Error`2">
            <summary>
            An error container used to report errors from within dynamic data operators
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
        </member>
        <member name="M:DynamicData.Kernel.Error`2.#ctor(System.Exception,`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="P:DynamicData.Kernel.Error`2.Key">
            <summary>
            Gets the key.
            </summary>
        </member>
        <member name="P:DynamicData.Kernel.Error`2.Value">
            <summary>
            Gets the object.
            </summary>
        </member>
        <member name="P:DynamicData.Kernel.Error`2.Exception">
            <summary>
            The exception.
            </summary>
        </member>
        <member name="M:DynamicData.Kernel.Error`2.op_Equality(DynamicData.Kernel.Error{`0,`1},DynamicData.Kernel.Error{`0,`1})">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:DynamicData.Kernel.Error`2.op_Inequality(DynamicData.Kernel.Error{`0,`1},DynamicData.Kernel.Error{`0,`1})">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:DynamicData.Kernel.Error`2.Equals(DynamicData.Kernel.Error{`0,`1})">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.Kernel.Error`2.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
            <param name="obj">Another object to compare to. </param>
        </member>
        <member name="M:DynamicData.Kernel.Error`2.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:DynamicData.Kernel.Error`2.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a fully qualified type name.
            </returns>
        </member>
        <member name="T:DynamicData.Change`1">
            <summary>
              Container to describe a single change to a cache
            </summary>
        </member>
        <member name="P:DynamicData.Change`1.Reason">
            <summary>
            The reason for the change
            </summary>
        </member>
        <member name="P:DynamicData.Change`1.Item">
            <summary>
            A single item change
            </summary>
        </member>
        <member name="P:DynamicData.Change`1.Range">
            <summary>
            A multiple item change
            </summary>
        </member>
        <member name="P:DynamicData.Change`1.Type">
            <summary>
            Gets a value indicating whether the change is a single item change or a range change
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="M:DynamicData.Change`1.#ctor(DynamicData.ListChangeReason,System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicData.Change`1"/> class.
            </summary>
            <param name="reason">The reason.</param>
            <param name="items">The items.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:DynamicData.Change`1.#ctor(DynamicData.ListChangeReason,`0,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicData.Change`1"/> class.
            </summary>
            <param name="reason">The reason.</param>
            <param name="current">The current.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:DynamicData.Change`1.#ctor(`0,System.Int32,System.Int32)">
            <summary>
            Construtor for ChangeReason.Move
            </summary>
            <param name="current">The current.</param>
            <param name="currentIndex">The CurrentIndex.</param>
            <param name="previousIndex">CurrentIndex of the previous.</param>
            <exception cref="T:System.ArgumentException">
            CurrentIndex must be greater than or equal to zero
            or
            PreviousIndex must be greater than or equal to zero
            </exception>
        </member>
        <member name="M:DynamicData.Change`1.#ctor(DynamicData.ListChangeReason,`0,DynamicData.Kernel.Optional{`0},System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicData.Change`2" /> struct.
            </summary>
            <param name="reason">The reason.</param>
            <param name="current">The current.</param>
            <param name="previous">The previous.</param>
            <param name="currentIndex">Value of the current.</param>
            <param name="previousIndex">Value of the previous.</param>
            <exception cref="T:System.ArgumentException">
            For ChangeReason.Add, a previous value cannot be specified
            or
            For ChangeReason.Change, must supply previous value
            </exception>
            <exception cref="T:System.ArgumentException">For ChangeReason.Add, a previous value cannot be specified
            or
            For ChangeReason.Change, must supply previous value</exception>
        </member>
        <member name="M:DynamicData.Change`1.Equals(DynamicData.Change{`0})">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.Change`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary> 
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DynamicData.Change`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:DynamicData.Change`1.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:DynamicData.ChangeSetEx">
            <summary>
            Change set extensions
            </summary>
        </member>
        <member name="M:DynamicData.ChangeSetEx.Transform``2(DynamicData.IChangeSet{``0},System.Func{``0,``1})">
            <summary>
            Transforms the changeset into a different type using the specified transform function.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <param name="source">The source.</param>
            <param name="transformer">The transformer.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            source
            or
            transformer
            </exception>
        </member>
        <member name="M:DynamicData.ChangeSetEx.Unified``1(DynamicData.IChangeSet{``0})">
            <summary>
            Returns a flattend source
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="T:DynamicData.ChangeType">
            <summary>
            Description of the type of change
            </summary>
        </member>
        <member name="F:DynamicData.ChangeType.Item">
            <summary>
            A single item change
            </summary>
        </member>
        <member name="F:DynamicData.ChangeType.Range">
            <summary>
            A multiple item change
            </summary>
        </member>
        <member name="T:DynamicData.FilterPolicy">
            <summary>
            The policy which will be applied when a mutable filter changes
            </summary>
        </member>
        <member name="F:DynamicData.FilterPolicy.CalculateDiffSet">
            <summary>
            A full diff-set of adds, updates and removes will be calculated. Use this when objects are mutable.
            </summary>
        </member>
        <member name="F:DynamicData.FilterPolicy.ClearAndReplace">
            <summary>
            Clears the list and inserts batch of items matching the filter. Use this for much better performance
            </summary>
        </member>
        <member name="T:DynamicData.IChangeSetAdaptor`1">
            <summary>
            A simple adaptor to inject side effects into a changeset observable
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
        </member>
        <member name="M:DynamicData.IChangeSetAdaptor`1.Adapt(DynamicData.IChangeSet{`0})">
            <summary>
            Adapts the specified change.
            </summary>
            <param name="change">The change.</param>
        </member>
        <member name="M:DynamicData.Internal.AbstractFilter`2.UpdateWithFilter.#ctor(System.Boolean,DynamicData.Change{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="M:DynamicData.Internal.AnomynousObservableCache`2.#ctor(DynamicData.IObservableCache{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="P:DynamicData.Internal.AnomynousObservableCache`2.CountChanged">
            <summary>
            A count changed observable starting with the current count
            </summary>
        </member>
        <member name="M:DynamicData.Internal.AnomynousObservableCache`2.Watch(`1)">
            <summary>
            Watches updates from a single item using the specified key
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.Internal.AnomynousObservableCache`2.Connect">
            <summary>
            Returns a stream of cache updates preceeded with the initital cache state
            </summary>
            <returns></returns>
        </member>
        <member name="M:DynamicData.Internal.AnomynousObservableCache`2.Connect(System.Func{`0,System.Boolean})">
            <summary>
            Returns a filtered stream of cache updates preceeded with the initital filtered state
            </summary>
            <param name="filter">The filter.</param>
            <returns></returns>
        </member>
        <member name="P:DynamicData.Internal.AnomynousObservableCache`2.Keys">
            <summary>
            Gets the keys
            </summary>
        </member>
        <member name="P:DynamicData.Internal.AnomynousObservableCache`2.Items">
            <summary>
            Gets the Items
            </summary>
        </member>
        <member name="P:DynamicData.Internal.AnomynousObservableCache`2.Count">
            <summary>
            The total count of cached items
            </summary>
        </member>
        <member name="P:DynamicData.Internal.AnomynousObservableCache`2.KeyValues">
            <summary>
            Gets the key value pairs
            </summary>
        </member>
        <member name="M:DynamicData.Internal.AnomynousObservableCache`2.Lookup(`1)">
            <summary>
            Lookup a single item using the specified key.
            </summary>
            <remarks>
            Fast indexed lookup
            </remarks>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.Internal.AnomynousObservableCache`2.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:DynamicData.Internal.KeySelectorException">
            <summary>
            
            </summary>
        </member>
        <member name="M:DynamicData.Internal.KeySelectorException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Exception"/> class.
            </summary>
        </member>
        <member name="M:DynamicData.Internal.KeySelectorException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Exception"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error. </param>
        </member>
        <member name="M:DynamicData.Internal.KeySelectorException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Exception"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param><param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
        </member>
        <member name="P:DynamicData.Internal.KeyValueCollection`2.Comparer">
            <summary>
            Gets the comparer used to peform the sort
            </summary>
            <value>
            The comparer.
            </value>
        </member>
        <member name="T:DynamicData.Internal.TransformMany`2.TransformedItem`1">
            <summary>
             Staging object for ManyTransform.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:DynamicData.Internal.CombineOperator">
            <summary>
            How the multiple streams are combinedL
            </summary>
        </member>
        <member name="F:DynamicData.Internal.CombineOperator.ContainedInEach">
            <summary>
            Resultant stream is comprised of items which are in each the caches
            </summary>
        </member>
        <member name="F:DynamicData.Internal.CombineOperator.ContainedInAny">
            <summary>
            Resultant stream is comprised of items which are in any of the caches
            </summary>
        </member>
        <member name="F:DynamicData.Internal.CombineOperator.ExceptFor">
            <summary>
            Resultant stream is comprised of items which are in the first stream and not the others
            </summary>
        </member>
        <member name="T:DynamicData.Internal.Combiner`2">
            <summary>
                Combines multiple caches using logical opertators
            </summary>
        </member>
        <member name="T:DynamicData.Internal.DynamicFilter`2">
            <summary>
             Filters and maintains a cache
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
        </member>
        <member name="M:DynamicData.Internal.Grouper`3.ChangeWithGroup.#ctor(DynamicData.Change{`0,`1},System.Func{`0,`2})">
            <summary>
                Initializes a new instance of the <see cref="T:System.Object" /> class.
            </summary>
        </member>
        <member name="M:DynamicData.Internal.Grouper`3.ChangeWithGroup.ToString">
            <summary>
                Returns the fully qualified type name of this instance.
            </summary>
            <returns>
                A <see cref="T:System.String" /> containing a fully qualified type name.
            </returns>
        </member>
        <member name="M:DynamicData.Internal.IIndexCalculator`2.Load(DynamicData.ICache{`0,`1})">
            <summary>
            Initialises the specified changes.
            </summary>
            <param name="cache">The cache.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.Internal.IIndexCalculator`2.Calculate(DynamicData.IChangeSet{`0,`1})">
            <summary>
            Dynamic calculation of changed items which produce a result which can be enumerated through in order
            </summary>
            <returns></returns>
        </member>
        <member name="M:DynamicData.Internal.IIndexCalculator`2.ChangeComparer(DynamicData.Internal.KeyValueComparer{`0,`1})">
            <summary>
            Changes the comparer.
            </summary>
            <param name="comparer">The comparer.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.Internal.IIndexCalculator`2.Reorder">
            <summary>
            Reorders the current list.  Required when the list is sorted on mutable values
            </summary>
            <returns></returns>
        </member>
        <member name="P:DynamicData.Internal.IIndexCalculator`2.Comparer">
            <summary>
            Gets the comparer.
            </summary>
            <value>
            The comparer.
            </value>
        </member>
        <member name="P:DynamicData.Internal.IIndexCalculator`2.List">
            <summary>
            Gets the list.
            </summary>
        </member>
        <member name="T:DynamicData.Internal.IndexCalculator`2">
            <summary>
            Calculates a sequential change set.
            
            This enables the binding infrastructure to simply iterate the change set
            and apply indexed changes with no need to apply ant expensive IndexOf() operations.
            </summary>
        </member>
        <member name="M:DynamicData.Internal.IndexCalculator`2.#ctor(DynamicData.Internal.KeyValueComparer{`0,`1},DynamicData.Operators.SortOptimisations)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="M:DynamicData.Internal.IndexCalculator`2.Load(DynamicData.ICache{`0,`1})">
            <summary>
            Initialises the specified changes.
            </summary>
            <param name="cache">The cache.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.Internal.IndexCalculator`2.Reset(DynamicData.ICache{`0,`1})">
            <summary>
            Initialises the specified changes.
            </summary>
            <param name="cache">The cache.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.Internal.IndexCalculator`2.Calculate(DynamicData.IChangeSet{`0,`1})">
            <summary>
            Dynamic calculation of moved items which produce a result which can be enumerated through in order
            </summary>
            <returns></returns>
        </member>
        <member name="M:DynamicData.Internal.ManagedGroup`3.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param>
        </member>
        <member name="M:DynamicData.Internal.ManagedGroup`3.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:DynamicData.Internal.ManagedGroup`3.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:DynamicData.Internal.Sorter`2.Sort(DynamicData.IChangeSet{`0,`1})">
            <summary>
            Sorts the specified changes. Will return null if there are no changes
            </summary>
            <param name="changes">The changes.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.Internal.Sorter`2.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts all data using the specified comparer
            </summary>
            <param name="comparer">The comparer.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.Internal.Sorter`2.Sort">
            <summary>
            Sorts all data using the current comparer
            </summary>
            <returns></returns>
        </member>
        <member name="M:DynamicData.Internal.Sorter`2.DoSort(DynamicData.SortReason,DynamicData.IChangeSet{`0,`1})">
            <summary>
            Sorts using the specified sorter. Will return null if there are no changes
            </summary>
            <param name="sortReason">The sort reason.</param>
            <param name="changes">The changes.</param>
            <returns></returns>
        </member>
        <member name="T:DynamicData.Internal.TransformedItem`1">
            <summary>
                Staging object for ManyTransform.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:DynamicData.IGroup`2">
            <summary>
            A gouping of observable lists
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TGroup">The type of the group.</typeparam>
        </member>
        <member name="P:DynamicData.IGroup`2.GroupKey">
            <summary>
            Gets the group key.
            </summary>
        </member>
        <member name="P:DynamicData.IGroup`2.List">
            <summary>
            Gets the observable list.
            </summary>
        </member>
        <member name="T:DynamicData.AggregateType">
            <summary>
            The type of aggregation
            </summary>
        </member>
        <member name="F:DynamicData.AggregateType.Add">
            <summary>
            The add
            </summary>
        </member>
        <member name="F:DynamicData.AggregateType.Remove">
            <summary>
            The remove
            </summary>
        </member>
        <member name="T:DynamicData.AggregateItem`2">
            <summary>
            
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
        </member>
        <member name="M:DynamicData.AggregateItem`2.#ctor(DynamicData.AggregateType,`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicData.AggregateItem`2"/> struct.
            </summary>
            <param name="type">The type.</param>
            <param name="item">The item.</param>
            <param name="key">The key.</param>
        </member>
        <member name="P:DynamicData.AggregateItem`2.Key">
            <summary>
            Gets the key.
            </summary>
        </member>
        <member name="P:DynamicData.AggregateItem`2.Type">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="P:DynamicData.AggregateItem`2.Item">
            <summary>
            Gets the item.
            </summary>
        </member>
        <member name="T:DynamicData.ChangeReason">
            <summary>
             The reason for an individual change.  
            
            Used to signal consumers of any changes to the underlying cache
            </summary>
        </member>
        <member name="F:DynamicData.ChangeReason.Add">
            <summary>
             An item has been added
            </summary>
        </member>
        <member name="F:DynamicData.ChangeReason.Update">
            <summary>
             An item has been updated
            </summary>
        </member>
        <member name="F:DynamicData.ChangeReason.Remove">
            <summary>
             An item has removed
            </summary>
        </member>
        <member name="F:DynamicData.ChangeReason.Evaluate">
            <summary>
              Command to operators to re-evaluate.
            </summary>
        </member>
        <member name="F:DynamicData.ChangeReason.Moved">
            <summary>
            An item has been moved in a sorted collection
            </summary>
        </member>
        <member name="F:DynamicData.ChangeReason.Clear">
            <summary>
            The entire collection has been cleared
            </summary>
        </member>
        <member name="T:DynamicData.ConnectionStatus">
            <summary>
            Connectable cache status
            </summary>
        </member>
        <member name="F:DynamicData.ConnectionStatus.Pending">
            <summary>
            Status set to pending until first batch of data is received.
            </summary>
        </member>
        <member name="F:DynamicData.ConnectionStatus.Loaded">
            <summary>
            Status set to loaded when first batch of data has been received.  Remains loaded 
            until the cache is disposed or faults.
            </summary>
        </member>
        <member name="F:DynamicData.ConnectionStatus.Errored">
            <summary>
            There has been a error and the stream has stopped. No more status updates will be received.
            </summary>
        </member>
        <member name="F:DynamicData.ConnectionStatus.Completed">
            <summary>
            The stream has completed. No more status updates will be received.
            </summary>
        </member>
        <member name="T:DynamicData.Controllers.FilterController`1">
            <summary>
            Enables dynamic filtering of the stream
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:DynamicData.Controllers.FilterController`1.#ctor(System.Func{`0,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicData.Controllers.FilterController`1"/> class.
            </summary>
            <param name="defaultFilter">The default filter.</param>
        </member>
        <member name="M:DynamicData.Controllers.FilterController`1.Change(System.Func{`0,System.Boolean})">
            <summary>
            Change the current filter.
            </summary>
            <param name="filter">The filter. Set to null to include all items</param>
        </member>
        <member name="M:DynamicData.Controllers.FilterController`1.ChangeToIncludeAll">
            <summary>
            Changes the filter to include all items
            </summary>
        </member>
        <member name="M:DynamicData.Controllers.FilterController`1.ChangeToExcludeAll">
            <summary>
            Changes the filter to include all items
            </summary>
        </member>
        <member name="M:DynamicData.Controllers.FilterController`1.Reevaluate">
            <summary>
                Reevaluates all items.
            </summary>
        </member>
        <member name="M:DynamicData.Controllers.FilterController`1.Reevaluate(System.Func{`0,System.Boolean})">
            <summary>
                Evaluates the filter for items specified by the item selector.
            </summary>
            <param name="itemSelector">The item selector.</param>
        </member>
        <member name="P:DynamicData.Controllers.FilterController`1.FilterChanged">
            <summary>
            Observable which is fired when the filter is changed
            </summary>
            <value>
            The filter changed.
            </value>
        </member>
        <member name="P:DynamicData.Controllers.FilterController`1.EvaluateChanged">
            <summary>
            Observable which is fired when the re-evaluate is invoked
            </summary>
            <value>
            The evaluate changed.
            </value>
        </member>
        <member name="M:DynamicData.Controllers.FilterController`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:DynamicData.Controllers.GroupController">
            <summary>
            Controller used to inject meta data into a group stream.
            </summary>
        </member>
        <member name="M:DynamicData.Controllers.GroupController.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicData.Controllers.GroupController"/> class.
            </summary>
        </member>
        <member name="M:DynamicData.Controllers.GroupController.RefreshGroup">
            <summary>
            Force all items to re-evaluate whether which group the should belong in
            </summary>
        </member>
        <member name="M:DynamicData.Controllers.GroupController.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:DynamicData.Controllers.PageController">
            <summary>
            Dynamic page controller
            </summary>
        </member>
        <member name="M:DynamicData.Controllers.PageController.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="M:DynamicData.Controllers.PageController.#ctor(DynamicData.Operators.IPageRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="M:DynamicData.Controllers.PageController.Change(DynamicData.Operators.IPageRequest)">
            <summary>
            Request to change a page
            </summary>
            <param name="request">The request.</param>
            <exception cref="T:System.ArgumentNullException">request</exception>
        </member>
        <member name="P:DynamicData.Controllers.PageController.Changed">
            <summary>
            Observable which is fired when a  page request has been made
            </summary>
            <value>
            The changed.
            </value>
        </member>
        <member name="M:DynamicData.Controllers.PageController.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:DynamicData.Controllers.SortController`1">
            <summary>
            Enables dynamic inline sorting
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:DynamicData.Controllers.SortController`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicData.Controllers.SortController`1"/> class.
            </summary>
            <param name="defaultSort">The default sort.</param>
            <exception cref="T:System.ArgumentNullException">defaultSort</exception>
        </member>
        <member name="M:DynamicData.Controllers.SortController`1.SetDefaultSort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sets the default sort.
            </summary>
            <param name="defaultSort">The default sort.</param>
            <exception cref="T:System.ArgumentNullException">defaultSort</exception>
        </member>
        <member name="M:DynamicData.Controllers.SortController`1.Reset">
            <summary>
            Changes the sort back to the default comparer
            </summary>
        </member>
        <member name="M:DynamicData.Controllers.SortController`1.Resort">
            <summary>
            Reapplies the current sort.  Useful when a sorting on properties or methods which can dynamically change.
            </summary>
        </member>
        <member name="M:DynamicData.Controllers.SortController`1.Change(System.Collections.Generic.IComparer{`0})">
            <summary>
            Changes the sort comparer.
            </summary>
            <param name="comparer">The comparer.</param>
            <exception cref="T:System.ArgumentNullException">comparer</exception>
        </member>
        <member name="P:DynamicData.Controllers.SortController`1.ComparerChanged">
            <summary>
            Observable which is fired when the sort comparer is changed
            </summary>
            <value>
            The changed.
            </value>
        </member>
        <member name="P:DynamicData.Controllers.SortController`1.SortAgain">
            <summary>
            Observable which is fired when the sort comparer is changed
            </summary>
            <value>
            The changed.
            </value>
        </member>
        <member name="M:DynamicData.Controllers.SortController`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:DynamicData.Controllers.VirtualisingController">
            <summary>
            Virtualisation controller
            </summary>
        </member>
        <member name="M:DynamicData.Controllers.VirtualisingController.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicData.Controllers.VirtualisingController"/> class.
            </summary>
        </member>
        <member name="M:DynamicData.Controllers.VirtualisingController.#ctor(DynamicData.IVirtualRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicData.Controllers.VirtualisingController"/> class.
            </summary>
            <param name="request">The request.</param>
            <exception cref="T:System.ArgumentNullException">request</exception>
        </member>
        <member name="M:DynamicData.Controllers.VirtualisingController.Virtualise(DynamicData.IVirtualRequest)">
            <summary>
            Request to change the virtual results
            </summary>
            <param name="request">The request.</param>
            <exception cref="T:System.ArgumentNullException">request</exception>
        </member>
        <member name="P:DynamicData.Controllers.VirtualisingController.Changed">
            <summary>
            Observable which is fired when a change request has been made
            </summary>
            <value>
            The changed.
            </value>
        </member>
        <member name="M:DynamicData.Controllers.VirtualisingController.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="T:DynamicData.Diagnostics.ChangeStatistics">
            <summary>
                Object used to capture accumulated changes
            </summary>
        </member>
        <member name="M:DynamicData.Diagnostics.ChangeStatistics.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:System.Object" /> class.
            </summary>
        </member>
        <member name="M:DynamicData.Diagnostics.ChangeStatistics.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Object" /> class.
            </summary>
        </member>
        <member name="P:DynamicData.Diagnostics.ChangeStatistics.Adds">
            <summary>
                Gets the adds.
            </summary>
            <value>
                The adds.
            </value>
        </member>
        <member name="P:DynamicData.Diagnostics.ChangeStatistics.Updates">
            <summary>
                Gets the updates.
            </summary>
            <value>
                The updates.
            </value>
        </member>
        <member name="P:DynamicData.Diagnostics.ChangeStatistics.Removes">
            <summary>
                Gets the removes.
            </summary>
            <value>
                The removes.
            </value>
        </member>
        <member name="P:DynamicData.Diagnostics.ChangeStatistics.Evaluates">
            <summary>
                Gets the evaluates.
            </summary>
            <value>
                The evaluates.
            </value>
        </member>
        <member name="P:DynamicData.Diagnostics.ChangeStatistics.Count">
            <summary>
                Gets the count.
            </summary>
            <value>
                The count.
            </value>
        </member>
        <member name="P:DynamicData.Diagnostics.ChangeStatistics.Index">
            <summary>
                Gets the index.
            </summary>
            <value>
                The index.
            </value>
        </member>
        <member name="P:DynamicData.Diagnostics.ChangeStatistics.Moves">
            <summary>
                Gets the moves.
            </summary>
            <value>
                The moves.
            </value>
        </member>
        <member name="P:DynamicData.Diagnostics.ChangeStatistics.LastUpdated">
            <summary>
                Gets the last updated.
            </summary>
            <value>
                The last updated.
            </value>
        </member>
        <member name="M:DynamicData.Diagnostics.ChangeStatistics.Equals(DynamicData.Diagnostics.ChangeStatistics)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.Diagnostics.ChangeStatistics.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DynamicData.Diagnostics.ChangeStatistics.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:DynamicData.Diagnostics.ChangeStatistics.op_Equality(DynamicData.Diagnostics.ChangeStatistics,DynamicData.Diagnostics.ChangeStatistics)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:DynamicData.Diagnostics.ChangeStatistics.op_Inequality(DynamicData.Diagnostics.ChangeStatistics,DynamicData.Diagnostics.ChangeStatistics)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:DynamicData.Diagnostics.ChangeStatistics.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
            <returns>
                A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="T:DynamicData.Diagnostics.ChangeSummary">
            <summary>
            Accumulates change statics
            </summary>
        </member>
        <member name="M:DynamicData.Diagnostics.ChangeSummary.#ctor(System.Int32,DynamicData.Diagnostics.ChangeStatistics,DynamicData.Diagnostics.ChangeStatistics)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Object" /> class.
            </summary>
        </member>
        <member name="M:DynamicData.Diagnostics.ChangeSummary.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:System.Object" /> class.
            </summary>
        </member>
        <member name="P:DynamicData.Diagnostics.ChangeSummary.Latest">
            <summary>
            Gets the latest change
            </summary>
            <value>
            The latest.
            </value>
        </member>
        <member name="P:DynamicData.Diagnostics.ChangeSummary.Overall">
            <summary>
            Gets the overall change count
            </summary>
            <value>
            The overall.
            </value>
        </member>
        <member name="M:DynamicData.Diagnostics.ChangeSummary.Equals(DynamicData.Diagnostics.ChangeSummary)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.Diagnostics.ChangeSummary.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
            <returns>
                true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
            <param name="obj">
                The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.
            </param>
        </member>
        <member name="M:DynamicData.Diagnostics.ChangeSummary.GetHashCode">
            <summary>
                Serves as a hash function for a particular type.
            </summary>
            <returns>
                A hash code for the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="M:DynamicData.Diagnostics.ChangeSummary.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
            <returns>
                A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="T:DynamicData.Diagnostics.DiagnosticOperators">
            <summary>
            Extensions for diagnostics
            </summary>
        </member>
        <member name="M:DynamicData.Diagnostics.DiagnosticOperators.CollectUpdateStats``2(System.IObservable{DynamicData.IChangeSet{``0,``1}})">
            <summary>
            Accumulates update statistics
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:DynamicData.Diagnostics.DiagnosticOperators.CollectUpdateStats``1(System.IObservable{DynamicData.IChangeSet{``0}})">
            <summary>
            Accumulates update statistics
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The source.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="T:DynamicData.DynamicDataEx">
            <summary>
            Extensions for dynamic data
            </summary>
        </member>
        <member name="M:DynamicData.DynamicDataEx.FinallySafe``1(System.IObservable{``0},System.Action)">
            <summary>
            Ensure that finally is always called. Thanks to Lee Campbell for this
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="finallyAction">The finally action.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:DynamicData.DynamicDataEx.CacheOnDemand``2(System.IObservable{DynamicData.IChangeSet{``0,``1}})">
            <summary>
            Cache equivalent to Publish().RefCount().  The source is cached so long as there is at least 1 subscriber.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the destination key.</typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.DynamicDataEx.MonitorStatus``1(System.IObservable{``0})">
            <summary>
            Monitors the status of a stream
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:DynamicData.DynamicDataEx.ChangeKey``3(System.IObservable{DynamicData.IChangeSet{``0,``1}},System.Func{``0,``2})">
            <summary>
            Changes the primary key.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TSourceKey">The type of the source key.</typeparam>
            <typeparam name="TDestinationKey">The type of the destination key.</typeparam>
            <param name="source">The source.</param>
            <param name="keySelector">The key selector.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:DynamicData.DynamicDataEx.NotEmpty``2(System.IObservable{DynamicData.IChangeSet{``0,``1}})">
            <summary>
            Supresses updates which are empty
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:DynamicData.DynamicDataEx.Flatten``2(System.IObservable{DynamicData.IChangeSet{``0,``1}})">
            <summary>
            Flattens an update collection to it's individual items
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:DynamicData.DynamicDataEx.IgnoreUpdateWhen``2(System.IObservable{DynamicData.IChangeSet{``0,``1}},System.Func{``0,``0,System.Boolean})">
            <summary>
            Ignores the update when the condition is met.
            The first parameter in the ignore function is the current value and the second parameter is the previous value
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="ignoreFunction">The ignore function (current,previous)=>{ return true to ignore }.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.DynamicDataEx.IncludeUpdateWhen``2(System.IObservable{DynamicData.IChangeSet{``0,``1}},System.Func{``0,``0,System.Boolean})">
            <summary>
            Only includes the update when the condition is met.
            The first parameter in the ignore function is the current value and the second parameter is the previous value
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="includeFunction">The include function (current,previous)=>{ return true to include }.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.DynamicDataEx.MergeManyItems``3(System.IObservable{DynamicData.IChangeSet{``0,``1}},System.Func{``0,System.IObservable{``2}})">
            <summary>
            Dynamically merges the observable which is selected from each item in the stream, and unmerges the item
            when it is no longer part of the stream.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <param name="source">The source.</param>
            <param name="observableSelector">The observable selector.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source
            or
            observableSelector</exception>
        </member>
        <member name="M:DynamicData.DynamicDataEx.MergeManyItems``3(System.IObservable{DynamicData.IChangeSet{``0,``1}},System.Func{``0,``1,System.IObservable{``2}})">
            <summary>
            Dynamically merges the observable which is selected from each item in the stream, and unmerges the item
            when it is no longer part of the stream.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <param name="source">The source.</param>
            <param name="observableSelector">The observable selector.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source
            or
            observableSelector</exception>
        </member>
        <member name="M:DynamicData.DynamicDataEx.MergeMany``3(System.IObservable{DynamicData.IChangeSet{``0,``1}},System.Func{``0,System.IObservable{``2}})">
            <summary>
            Dynamically merges the observable which is selected from each item in the stream, and unmerges the item
            when it is no longer part of the stream.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <param name="source">The source.</param>
            <param name="observableSelector">The observable selector.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source
            or
            observableSelector</exception>
        </member>
        <member name="M:DynamicData.DynamicDataEx.MergeMany``3(System.IObservable{DynamicData.IChangeSet{``0,``1}},System.Func{``0,``1,System.IObservable{``2}})">
            <summary>
            Dynamically merges the observable which is selected from each item in the stream, and unmerges the item
            when it is no longer part of the stream.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <param name="source">The source.</param>
            <param name="observableSelector">The observable selector.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source
            or
            observableSelector</exception>
        </member>
        <member name="M:DynamicData.DynamicDataEx.SubscribeMany``2(System.IObservable{DynamicData.IChangeSet{``0,``1}},System.Func{``0,System.IDisposable})">
            <summary>
            Subscribes to each item when it is added to the stream and unsubcribes when it is removed.  All items will be unsubscribed when the stream is disposed
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="subscriptionFactory">The subsription function</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source
            or
            subscriptionFactory</exception>
            <remarks>
            Subscribes to each item when it is added or updates and unsubcribes when it is removed
            </remarks>
        </member>
        <member name="M:DynamicData.DynamicDataEx.SubscribeMany``2(System.IObservable{DynamicData.IChangeSet{``0,``1}},System.Func{``0,``1,System.IDisposable})">
            <summary>
            Subscribes to each item when it is added to the stream and unsubcribes when it is removed.  All items will be unsubscribed when the stream is disposed
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="subscriptionFactory">The subsription function</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source
            or
            subscriptionFactory</exception>
            <remarks>
            Subscribes to each item when it is added or updates and unsubcribes when it is removed
            </remarks>
        </member>
        <member name="M:DynamicData.DynamicDataEx.OnItemRemoved``2(System.IObservable{DynamicData.IChangeSet{``0,``1}},System.Action{``0})">
            <summary>
            Callback for each item as and when it is being removed from the stream
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="removeAction">The remove action.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            source
            or
            removeAction
            </exception>
        </member>
        <member name="M:DynamicData.DynamicDataEx.DisposeMany``2(System.IObservable{DynamicData.IChangeSet{``0,``1}})">
            <summary>
            Disposes each item when no longer required.
            
            Individual items are disposed when removed or replaced. All items
            are disposed when the stream is disposed
            </summary>
            <remarks>
            </remarks>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <returns>A continuation of the original stream</returns>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:DynamicData.DynamicDataEx.WhereReasonsAre``2(System.IObservable{DynamicData.IChangeSet{``0,``1}},DynamicData.ChangeReason[])">
            <summary>
            Includes changes for the specified reasons only
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="reasons">The reasons.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">reasons</exception>
            <exception cref="T:System.ArgumentException">Must select at least on reason</exception>
        </member>
        <member name="M:DynamicData.DynamicDataEx.WhereReasonsAreNot``2(System.IObservable{DynamicData.IChangeSet{``0,``1}},DynamicData.ChangeReason[])">
            <summary>
            Excludes updates for the specified reasons
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="reasons">The reasons.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">reasons</exception>
            <exception cref="T:System.ArgumentException">Must select at least on reason</exception>
        </member>
        <member name="M:DynamicData.DynamicDataEx.Batch``2(System.IObservable{DynamicData.IChangeSet{``0,``1}},System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Batches the updates for the specified time period
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="timeSpan">The time span.</param>
            <param name="scheduler">The scheduler.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source
            or
            scheduler</exception>
        </member>
        <member name="M:DynamicData.DynamicDataEx.FlattenBufferResult``2(System.IObservable{System.Collections.Generic.IList{DynamicData.IChangeSet{``0,``1}}})">
            <summary>
            Convert the result of a buffer operation to a single change set
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.DynamicDataEx.BatchIf``2(System.IObservable{DynamicData.IChangeSet{``0,``1}},System.IObservable{System.Boolean},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Batches the underlying updates if a pause signal (i.e when the buffer selector return true) has been received.
            When a resume signal has been received the batched updates will  be fired.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="pauseIfTrueSelector">When true, observable begins to buffer and when false, window closes and buffered result if notified</param>
            <param name="scheduler">The scheduler.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:DynamicData.DynamicDataEx.BatchIf``2(System.IObservable{DynamicData.IChangeSet{``0,``1}},System.IObservable{System.Boolean},System.Boolean,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Batches the underlying updates if a pause signal (i.e when the buffer selector return true) has been received.
            When a resume signal has been received the batched updates will  be fired.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="pauseIfTrueSelector">When true, observable begins to buffer and when false, window closes and buffered result if notified</param>
            <param name="intialPauseState">if set to <c>true</c> [intial pause state].</param>
            <param name="scheduler">The scheduler.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:DynamicData.DynamicDataEx.BatchIf``2(System.IObservable{DynamicData.IChangeSet{``0,``1}},System.IObservable{System.Boolean},System.Nullable{System.TimeSpan},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Batches the underlying updates if a pause signal (i.e when the buffer selector return true) has been received.
            When a resume signal has been received the batched updates will  be fired.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="pauseIfTrueSelector">When true, observable begins to buffer and when false, window closes and buffered result if notified</param>
            <param name="timeOut">Specify a time to ensure the buffer window does not stay open for too long</param>
            <param name="scheduler">The scheduler.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:DynamicData.DynamicDataEx.BatchIf``2(System.IObservable{DynamicData.IChangeSet{``0,``1}},System.IObservable{System.Boolean},System.Boolean,System.Nullable{System.TimeSpan},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Batches the underlying updates if a pause signal (i.e when the buffer selector return true) has been received.
            When a resume signal has been received the batched updates will  be fired.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="pauseIfTrueSelector">When true, observable begins to buffer and when false, window closes and buffered result if notified</param>
            <param name="intialPauseState">if set to <c>true</c> [intial pause state].</param>
            <param name="timeOut">Specify a time to ensure the buffer window does not stay open for too long</param>
            <param name="scheduler">The scheduler.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:DynamicData.DynamicDataEx.SkipInitial``2(System.IObservable{DynamicData.IChangeSet{``0,``1}})">
            <summary>
            Defer the subscribtion until loaded and skip initial changeset
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:DynamicData.DynamicDataEx.DeferUntilLoaded``2(System.IObservable{DynamicData.IChangeSet{``0,``1}})">
            <summary>
            Defer the subscription until the stream has been inflated with data
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.DynamicDataEx.TrueForAll``3(System.IObservable{DynamicData.IChangeSet{``0,``1}},System.Func{``0,System.IObservable{``2}},System.Func{``2,System.Boolean})">
            <summary>
            Produces a boolean observable indicating whether the latest resulting value from all of the specified observables matches
            the equality condition. The observable is re-evaluated whenever
            
            i) The cache changes
            or ii) The inner observable changes
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="source">The source.</param>
            <param name="observableSelector">Selector which returns the target observable</param>
            <param name="equalityCondition">The equality condition.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:DynamicData.DynamicDataEx.TrueForAll``3(System.IObservable{DynamicData.IChangeSet{``0,``1}},System.Func{``0,System.IObservable{``2}},System.Func{``0,``2,System.Boolean})">
            <summary>
            Produces a boolean observable indicating whether the latest resulting value from all of the specified observables matches
            the equality condition. The observable is re-evaluated whenever
            
            i) The cache changes
            or ii) The inner observable changes
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="source">The source.</param>
            <param name="observableSelector">Selector which returns the target observable</param>
            <param name="equalityCondition">The equality condition.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:DynamicData.DynamicDataEx.TrueForAny``3(System.IObservable{DynamicData.IChangeSet{``0,``1}},System.Func{``0,System.IObservable{``2}},System.Func{``0,``2,System.Boolean})">
            <summary>
            Produces a boolean observable indicating whether the resulting value of whether any of the specified observables matches
            the equality condition. The observable is re-evaluated whenever
            i) The cache changes.
            or ii) The inner observable changes.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="source">The source.</param>
            <param name="observableSelector">The observable selector.</param>
            <param name="equalityCondition">The equality condition.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            source
            or
            observableSelector
            or
            equalityCondition
            </exception>
        </member>
        <member name="M:DynamicData.DynamicDataEx.TrueForAny``3(System.IObservable{DynamicData.IChangeSet{``0,``1}},System.Func{``0,System.IObservable{``2}},System.Func{``2,System.Boolean})">
            <summary>
            Produces a boolean observable indicating whether the resulting value of whether any of the specified observables matches
            the equality condition. The observable is re-evaluated whenever
            i) The cache changes.
            or ii) The inner observable changes.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="source">The source.</param>
            <param name="observableSelector">The observable selector.</param>
            <param name="equalityCondition">The equality condition.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            source
            or
            observableSelector
            or
            equalityCondition
            </exception>
        </member>
        <member name="M:DynamicData.DynamicDataEx.QueryWhenChanged``3(System.IObservable{DynamicData.IChangeSet{``0,``1}},System.Func{DynamicData.IQuery{``0,``1},``2})">
            <summary>
             The latest copy of the cache is exposed for querying after each modification to the underlying data
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <param name="source">The source.</param>
            <param name="resultSelector">The result selector.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            source
            or
            resultSelector
            </exception>
        </member>
        <member name="M:DynamicData.DynamicDataEx.QueryWhenChanged``2(System.IObservable{DynamicData.IChangeSet{``0,``1}})">
            <summary>
            The latest copy of the cache is exposed for querying i)  after each modification to the underlying data ii) upon subscription
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:DynamicData.DynamicDataEx.QueryWhenChanged``3(System.IObservable{DynamicData.IChangeSet{``0,``1}},System.Func{``0,System.IObservable{``2}})">
            <summary>
            The latest copy of the cache is exposed for querying i)  after each modification to the underlying data ii) on subscription
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="source">The source.</param>
            <param name="itemChangedTrigger">Should the query be triggers for observables on individual items</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:DynamicData.DynamicDataEx.WatchValue``2(DynamicData.IObservableCache{``0,``1},``1)">
            <summary>
            Watches updates for a single value matching the specified key
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="key">The key.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:DynamicData.DynamicDataEx.WatchValue``2(System.IObservable{DynamicData.IChangeSet{``0,``1}},``1)">
            <summary>
            Watches updates for a single value matching the specified key
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="key">The key.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:DynamicData.DynamicDataEx.Watch``2(System.IObservable{DynamicData.IChangeSet{``0,``1}},``1)">
            <summary>
            Returns an observable of any updates which match the specified key,  preceeded with the initital cache state
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.DynamicDataEx.ExpireAfter``2(System.IObservable{DynamicData.IChangeSet{``0,``1}},System.Func{``0,System.Nullable{System.TimeSpan}},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Automatically removes items from the stream after the time specified by
            the timeSelector elapses.  Return null if the item should never be removed
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="timeSelector">The time selector.</param>
            <param name="scheduler">The scheduler.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            source
            or
            timeSelector
            </exception>
        </member>
        <member name="M:DynamicData.DynamicDataEx.ExpireAfter``2(System.IObservable{DynamicData.IChangeSet{``0,``1}},System.Func{``0,System.Nullable{System.TimeSpan}},System.Nullable{System.TimeSpan})">
            <summary>
            Automatically removes items from the stream on the next poll after the time specified by
            the time selector elapses 
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The cache.</param>
            <param name="timeSelector">The time selector.  Return null if the item should never be removed</param>
            <param name="pollingInterval">The polling interval.  if this value is specified,  items are expired on an interval.
            This will result in a loss of accuracy of the time which the item is expired but is less computationally expensive.
            </param>
            <returns>An observable of anumerable of the kev values which has been removed</returns>
            <exception cref="T:System.ArgumentNullException">source
            or
            timeSelector</exception>
        </member>
        <member name="M:DynamicData.DynamicDataEx.ExpireAfter``2(System.IObservable{DynamicData.IChangeSet{``0,``1}},System.Func{``0,System.Nullable{System.TimeSpan}},System.Nullable{System.TimeSpan},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Automatically removes items from the stream on the next poll after the time specified by
            the time selector elapses 
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The cache.</param>
            <param name="timeSelector">The time selector.  Return null if the item should never be removed</param>
            <param name="pollingInterval">The polling interval.  if this value is specified,  items are expired on an interval.
            This will result in a loss of accuracy of the time which the item is expired but is less computationally expensive.
            </param>
            <param name="scheduler">The scheduler.</param>
            <returns>An observable of anumerable of the kev values which has been removed</returns>
            <exception cref="T:System.ArgumentNullException">source
            or
            timeSelector</exception>
        </member>
        <member name="M:DynamicData.DynamicDataEx.ForExpiry``2(System.IObservable{DynamicData.IChangeSet{``0,``1}},System.Func{``0,System.Nullable{System.TimeSpan}},System.Nullable{System.TimeSpan},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Automatically removes items from the cache after the time specified by
            the time selector elapses. 
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The cache.</param>
            <param name="timeSelector">The time selector.  Return null if the item should never be removed</param>
            <param name="interval">A polling interval.  Since multiple timer subscriptions can be expensive,
            it may be worth setting the interval.
            </param>
            <param name="scheduler">The scheduler.</param>
            <returns>An observable of anumerable of the kev values which has been removed</returns>
            <exception cref="T:System.ArgumentNullException">source
            or
            timeSelector</exception>
        </member>
        <member name="M:DynamicData.DynamicDataEx.LimitSizeTo``2(System.IObservable{DynamicData.IChangeSet{``0,``1}},System.Int32)">
            <summary>
            Applies a size limiter to the number of records which can be included in the 
            underlying cache.  When the size limit is reached the oldest items are removed.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="size">The size.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source</exception>
            <exception cref="T:System.ArgumentException">size cannot be zero</exception>
        </member>
        <member name="M:DynamicData.DynamicDataEx.Page``2(System.IObservable{DynamicData.ISortedChangeSet{``0,``1}},DynamicData.Controllers.PageController)">
            <summary>
            Pages the specified source.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="controller">The controller.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:DynamicData.DynamicDataEx.Filter``2(System.IObservable{DynamicData.IChangeSet{``0,``1}},System.Func{``0,System.Boolean})">
            <summary>
            Filters the specified source.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="filter">The filter.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.DynamicDataEx.Filter``2(System.IObservable{DynamicData.IChangeSet{``0,``1}},DynamicData.Controllers.FilterController{``0})">
            <summary>
            Creates a stream which can be dynamically controlled.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="filterController">The filter.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:DynamicData.DynamicDataEx.UpdateIndex``2(System.IObservable{DynamicData.ISortedChangeSet{``0,``1}})">
            <summary>
            Updates the index for an object which implements IIndexAware
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.DynamicDataEx.InvokeEvaluate``2(System.IObservable{DynamicData.IChangeSet{``0,``1}})">
            <summary>
            Invokes Evaluate method for an object which implements IEvaluateAware
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.DynamicDataEx.Sort``2(System.IObservable{DynamicData.IChangeSet{``0,``1}},System.Collections.Generic.IComparer{``0},DynamicData.Operators.SortOptimisations,System.Int32)">
            <summary>
            Sorts using the specified comparer.
            Returns the underlying ChangeSet as as per the system conventions.
            The resulting changeset also exposes a sorted key value collection of of the underlying cached data
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="comparer">The comparer.</param>
            <param name="sortOptimisations">Sort optimisation flags. Specify one or more sort optimisations</param>
            <param name="resetThreshold">The number of updates before the entire list is resorted (rather than inline sore)</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            source
            or
            comparer
            </exception>
        </member>
        <member name="M:DynamicData.DynamicDataEx.Sort``2(System.IObservable{DynamicData.IChangeSet{``0,``1}},DynamicData.Controllers.SortController{``0},DynamicData.Operators.SortOptimisations,System.Int32)">
            <summary>
            Sorts a sequence as dictated by the sort controller.
            Sequence returns a changeset as as per the system conventions.
            Additionally returns a fully sort collection of cached data
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="sortController">The controlled sort.</param>
            <param name="sortOptimisations">Sort optimisation flags. Specify one or more sort optimisations</param>
            <param name="resetThreshold">The number of updates before the entire list is resorted (rather than inline sore)</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">scheduler</exception>
        </member>
        <member name="M:DynamicData.DynamicDataEx.And``2(System.IObservable{DynamicData.IChangeSet{``0,``1}},System.IObservable{DynamicData.IChangeSet{``0,``1}}[])">
            <summary>
            Applied a logical And operator between the collections i.e items which are in all of the sources are included
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="others">The others.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            source
            or
            others
            </exception>
        </member>
        <member name="M:DynamicData.DynamicDataEx.Or``2(System.IObservable{DynamicData.IChangeSet{``0,``1}},System.IObservable{DynamicData.IChangeSet{``0,``1}}[])">
            <summary>
            Applied a logical Or operator between the collections i.e items which are in any of the sources are included
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="others">The others.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            source
            or
            others
            </exception>
        </member>
        <member name="M:DynamicData.DynamicDataEx.Except``2(System.IObservable{DynamicData.IChangeSet{``0,``1}},System.IObservable{DynamicData.IChangeSet{``0,``1}}[])">
            <summary>
            Applied a logical Intersect operator between the collections i.e items from the first set are included unless contained in the other
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="others">The others.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            source
            or
            others
            </exception>
        </member>
        <member name="M:DynamicData.DynamicDataEx.StartWithItem``2(System.IObservable{DynamicData.IChangeSet{``0,``1}},``0)">
            <summary>
            The equivalent of rx startwith operator, but wraps the item in a change where reason is ChangeReason.Add
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.DynamicDataEx.StartWithItem``2(System.IObservable{DynamicData.IChangeSet{``0,``1}},``0,``1)">
            <summary>
            The equivalent of rx startwith operator, but wraps the item in a change where reason is ChangeReason.Add
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="item">The item.</param>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.DynamicDataEx.Transform``3(System.IObservable{DynamicData.IChangeSet{``1,``2}},System.Func{``1,``2,``0})">
            <summary>
            Projects each update item to a new form using the specified transform function
            </summary>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="transformFactory">The transform factory.</param>
            <returns>
            A transformed update collection
            </returns>
            <exception cref="T:System.ArgumentNullException">source
            or
            transformFactory</exception>
        </member>
        <member name="M:DynamicData.DynamicDataEx.Transform``3(System.IObservable{DynamicData.IChangeSet{``1,``2}},System.Func{``1,``0})">
            <summary>
            Projects each update item to a new form using the specified transform function
            </summary>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="transformFactory">The transform factory.</param>
            <returns>
            A transformed update collection
            </returns>
            <exception cref="T:System.ArgumentNullException">source
            or
            transformFactory</exception>
        </member>
        <member name="M:DynamicData.DynamicDataEx.TransformMany``4(System.IObservable{DynamicData.IChangeSet{``2,``3}},System.Func{``2,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Equivalent to a select many transform. To work, the key must individually identify each child. 
            
            **** Assumes each child can only have one  parent - support for children with multiple parents is a work in progresss
            </summary>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <typeparam name="TDestinationKey">The type of the destination key.</typeparam>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TSourceKey">The type of the source key.</typeparam>
            <param name="source">The source.</param>
            <param name="manyselector">The manyselector.</param>s
            <returns></returns>
        </member>
        <member name="M:DynamicData.DynamicDataEx.TransformMany``4(System.IObservable{DynamicData.IChangeSet{``2,``3}},System.Func{``2,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1},System.Boolean)">
            <summary>
            Equivalent to a select many transform. To work, the key must individually identify each child. 
            
            **** Assumes each child can only have one  parent - support for children with multiple parents is a work in progresss
            </summary>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <typeparam name="TDestinationKey">The type of the destination key.</typeparam>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TSourceKey">The type of the source key.</typeparam>
            <param name="source">The source.</param>
            <param name="manyselector">The manyselector.</param>
            <param name="keySelector">The key selector which must be unique across all</param>
            <param name="childHasOneParent">if set to <c>true</c> the child only ever belongs to one parent</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.DynamicDataEx.FlattenWithSingleParent``4(System.IObservable{DynamicData.IChangeSet{``2,``3}},System.Func{``2,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1})">
            <summary>
            Flattens the with single parent.
            </summary>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <typeparam name="TDestinationKey">The type of the destination key.</typeparam>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TSourceKey">The type of the source key.</typeparam>
            <param name="source">The source.</param>
            <param name="manyselector">The manyselector.</param>
            <param name="keySelector">The key selector.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.DynamicDataEx.TransformSafe``3(System.IObservable{DynamicData.IChangeSet{``1,``2}},System.Func{``1,``0},System.Action{DynamicData.Kernel.Error{``1,``2}})">
            <summary>
            Projects each update item to a new form using the specified transform function,
            providing an error handling action to safely handle transform errors without killing the stream.
            </summary>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="transformFactory">The transform factory.</param>
            <param name="errorHandler">Provides the option to safely handle errors without killing the stream.
             If not specified the stream will terminate as per rx convention.
            </param>
            <returns>
            A transformed update collection
            </returns>
            <exception cref="T:System.ArgumentNullException">source
            or
            transformFactory</exception>
        </member>
        <member name="M:DynamicData.DynamicDataEx.TransformSafe``3(System.IObservable{DynamicData.IChangeSet{``1,``2}},System.Func{``1,``2,``0},System.Action{DynamicData.Kernel.Error{``1,``2}})">
            <summary>
            Projects each update item to a new form using the specified transform function,
            providing an error handling action to safely handle transform errors without killing the stream.
            </summary>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="transformFactory">The transform factory.</param>
            <param name="errorHandler">Provides the option to safely handle errors without killing the stream.
             If not specified the stream will terminate as per rx convention.
            </param>
            <returns>
            A transformed update collection
            </returns>
            <exception cref="T:System.ArgumentNullException">source
            or
            transformFactory</exception>
        </member>
        <member name="M:DynamicData.DynamicDataEx.DistinctValues``3(System.IObservable{DynamicData.IChangeSet{``0,``1}},System.Func{``0,``2})">
            <summary>
                Selects distinct values from the source.
            </summary>
            <typeparam name="TObject">The tyoe object from which the distinct values are selected</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="source">The soure.</param>
            <param name="valueSelector">The value selector.</param>
            <returns></returns>
            <remarks>
            Due to it's nature only adds or removes can be returned
            </remarks>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:DynamicData.DynamicDataEx.Group``3(System.IObservable{DynamicData.IChangeSet{``0,``1}},System.Func{``0,``2},System.IObservable{DynamicData.IDistinctChangeSet{``2}})">
            <summary>
             Groups the source on the value returned by group selector factory. 
             A group is included for each item in the resulting group source.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TGroupKey">The type of the group key.</typeparam>
            <param name="source">The source.</param>
            <param name="groupSelector">The group selector factory.</param> 
            <param name="resultGroupSource">
              A distinct stream used to determine the result
            </param>
            <remarks>
            Useful for parent-child collection when the parent and child are soured from different streams
            </remarks>
            <returns></returns>
        </member>
        <member name="M:DynamicData.DynamicDataEx.Group``3(System.IObservable{DynamicData.IChangeSet{``0,``1}},System.Func{``0,``2})">
            <summary>
             Groups the source on the value returned by group selector factory. 
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TGroupKey">The type of the group key.</typeparam>
            <param name="source">The source.</param>
            <param name="groupSelectorKey">The group selector key.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.DynamicDataEx.Group``3(System.IObservable{DynamicData.IChangeSet{``0,``1}},System.Func{``0,``2},DynamicData.Controllers.GroupController)">
            <summary>
             Groups the source on the value returned by group selector factory. 
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TGroupKey">The type of the group key.</typeparam>
            <param name="source">The source.</param>
            <param name="groupSelectorKey">The group selector key.</param>
            <param name="groupController">The group controller which enables reapplying the group</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            source
            or
            groupSelectorKey
            or
            groupController
            </exception>
        </member>
        <member name="M:DynamicData.DynamicDataEx.Top``2(System.IObservable{DynamicData.ISortedChangeSet{``0,``1}},System.Int32)">
            <summary>
            Limits the size of the result set to the specified number
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="size">The size.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">size;Size should be greater than zero</exception>
        </member>
        <member name="M:DynamicData.DynamicDataEx.Top``2(System.IObservable{DynamicData.IChangeSet{``0,``1}},System.Collections.Generic.IComparer{``0},System.Int32)">
            <summary>
            Limits the size of the result set to the specified number, ordering by the comparer
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="comparer">The comparer.</param>
            <param name="size">The size.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">size;Size should be greater than zero</exception>
        </member>
        <member name="M:DynamicData.DynamicDataEx.Virtualise``2(System.IObservable{DynamicData.ISortedChangeSet{``0,``1}},DynamicData.Controllers.VirtualisingController)">
            <summary>
            Virtualises the specified source.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="virtualisingController">The virtualising controller.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:DynamicData.DynamicDataEx.Bind``2(System.IObservable{DynamicData.IChangeSet{``0,``1}},DynamicData.Binding.IObservableCollection{``0})">
            <summary>
             Binds the results to the specified observable collection collection using the default update algorithm
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:DynamicData.DynamicDataEx.Bind``2(System.IObservable{DynamicData.IChangeSet{``0,``1}},DynamicData.Binding.IObservableCollection{``0},DynamicData.Binding.IObservableCollectionAdaptor{``0,``1})">
            <summary>
            Binds the results to the specified binding collection using the specified update algorithm
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
            <param name="updater">The updater.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:DynamicData.DynamicDataEx.Bind``2(System.IObservable{DynamicData.ISortedChangeSet{``0,``1}},DynamicData.Binding.IObservableCollection{``0})">
            <summary>
             Binds the results to the specified observable collection collection using the default update algorithm
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:DynamicData.DynamicDataEx.Bind``2(System.IObservable{DynamicData.ISortedChangeSet{``0,``1}},DynamicData.Binding.IObservableCollection{``0},DynamicData.Binding.ISortedObservableCollectionAdaptor{``0,``1})">
            <summary>
            Binds the results to the specified binding collection using the specified update algorithm
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
            <param name="updater">The updater.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:DynamicData.DynamicDataEx.Adapt``2(System.IObservable{DynamicData.IChangeSet{``0,``1}},DynamicData.IChangeSetAdaptor{``0,``1})">
            <summary>
            Inject side effects into the stream using the specified adaptor
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="adaptor">The adaptor.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            source
            or
            destination
            </exception>
        </member>
        <member name="M:DynamicData.DynamicDataEx.Adapt``2(System.IObservable{DynamicData.ISortedChangeSet{``0,``1}},DynamicData.ISortedChangeSetAdaptor{``0,``1})">
            <summary>
            Inject side effects into the stream using the specified sorted adaptor
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="adaptor">The adaptor.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            source
            or
            destination
            </exception>
        </member>
        <member name="T:DynamicData.Experimental.ExperimentalEx">
            <summary>
            Experimental operator extensions
            </summary>
        </member>
        <member name="M:DynamicData.Experimental.ExperimentalEx.AsWatcher``2(System.IObservable{DynamicData.IChangeSet{``0,``1}},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Wraps the source cache, optimising it for watching individual updates
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="scheduler">The scheduler.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="P:DynamicData.Experimental.ISubjectWithRefCount`1.RefCount">
            <summary>number of subscribers 
            </summary>
            <value>
            The ref count.
            </value>
        </member>
        <member name="T:DynamicData.Experimental.IWatcher`2">
            <summary>
            A specialisation of the SourceList which is optimised for watching individual items
            
            
            </summary>
            <typeparam name="TObject"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:DynamicData.Experimental.IWatcher`2.Watch(`1)">
            <summary>
            Watches updates which match the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="T:DynamicData.Experimental.SubjectWithRefCount`1">
            <summary>
            A subject with a count of the number of subscribers
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:DynamicData.Experimental.SubjectWithRefCount`1.#ctor(System.Reactive.Subjects.ISubject{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="M:DynamicData.Experimental.SubjectWithRefCount`1.OnNext(`0)">
            <summary>
            Provides the observer with new data.
            </summary>
            <param name="value">The current notification information.</param>
        </member>
        <member name="M:DynamicData.Experimental.SubjectWithRefCount`1.OnError(System.Exception)">
            <summary>
            Notifies the observer that the provider has experienced an error condition.
            </summary>
            <param name="error">An object that provides additional information about the error.</param>
        </member>
        <member name="M:DynamicData.Experimental.SubjectWithRefCount`1.OnCompleted">
            <summary>
            Notifies the observer that the provider has finished sending push-based notifications.
            </summary>
        </member>
        <member name="M:DynamicData.Experimental.SubjectWithRefCount`1.Subscribe(System.IObserver{`0})">
            <summary>
            Notifies the provider that an observer is to receive notifications.
            </summary>
            <returns>
            The observer's interface that enables resources to be disposed.
            </returns>
            <param name="observer">The object that is to receive notifications.</param>
        </member>
        <member name="P:DynamicData.Experimental.SubjectWithRefCount`1.RefCount">
            <summary>number of subscribers 
            </summary>
            <value>
            The ref count.
            </value>
        </member>
        <member name="T:DynamicData.IChangeSet`2">
            <summary>
            A collection of changes.
            
            Changes are always published in the order.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
        </member>
        <member name="P:DynamicData.IChangeSet`2.Evaluates">
            <summary>
            Gets the number of evaluates
            </summary>
        </member>
        <member name="T:DynamicData.IChangeSetAdaptor`2">
            <summary>
            A simple adaptor to inject side effects into a changeset observable
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
        </member>
        <member name="M:DynamicData.IChangeSetAdaptor`2.Adapt(DynamicData.IChangeSet{`0,`1})">
            <summary>
            Adapts the specified change.
            </summary>
            <param name="change">The change.</param>
        </member>
        <member name="T:DynamicData.IDistinctChangeSet`1">
            <summary>
            A collection of distinct value updates.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:DynamicData.IGroup`3">
            <summary>
            An update stream which has been grouped by a common key
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TGroupKey">The type of value used to group the original stream</typeparam>
        </member>
        <member name="P:DynamicData.IGroup`3.Cache">
            <summary>
            The observable.for the group
            </summary>
            <value>
            The observable.
            </value>
        </member>
        <member name="T:DynamicData.IGroupChangeSet`3">
            <summary>
             A grouped update collection
            </summary>
            <typeparam name="TObject">The source object type</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>s
            <typeparam name="TGroupKey">The value on which the stream has been grouped</typeparam>
        </member>
        <member name="T:DynamicData.IIntermediateCache`2">
            <summary>
            An observable cache which exposes an update API. 
            
            Intended to be used as a helper for creating custom operators.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
        </member>
        <member name="M:DynamicData.IIntermediateCache`2.BatchUpdate(System.Action{DynamicData.IIntermediateUpdater{`0,`1}})">
            <summary>
            Action to apply a batch update to a cache. Multiple update methods can be invoked within a single batch operation.
            These operations are invoked within the cache's lock and is therefore thread safe.
            
            The result of the action will produce a single changeset
            </summary>
            <param name="updateAction">The update action.</param>
        </member>
        <member name="T:DynamicData.IKeyValue`2">
            <summary>
            A keyed value
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
        </member>
        <member name="P:DynamicData.IKeyValue`2.Value">
            <summary>
            The value
            </summary>
        </member>
        <member name="T:DynamicData.IKey`1">
            <summary>
            Represents the key of an object
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:DynamicData.IKey`1.Key">
            <summary>
            The key 
            </summary>
        </member>
        <member name="T:DynamicData.IConnectableCache`2">
            <summary>
            A cache for observing and querying in memory data
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
        </member>
        <member name="M:DynamicData.IConnectableCache`2.Watch(`1)">
            <summary>
            Returns an observable of any changes which match the specified key.  The sequence starts with the inital item in the cache (if there is one).
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.IConnectableCache`2.Connect">
            <summary>
            Returns a observable of cache changes preceeded with the initital cache state
            </summary>
            <returns></returns>
        </member>
        <member name="M:DynamicData.IConnectableCache`2.Connect(System.Func{`0,System.Boolean})">
            <summary>
            Returns a filtered changeset of cache changes preceeded with the initial state
            </summary>
            <param name="filter">The filter.</param>
            <returns></returns>
        </member>
        <member name="P:DynamicData.IConnectableCache`2.CountChanged">
            <summary>
            A count changed observable starting with the current count
            </summary>
        </member>
        <member name="T:DynamicData.IObservableCache`2">
            <summary>
              /// A cache for observing and querying in memory data. With additional data access operators
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
        </member>
        <member name="P:DynamicData.IObservableCache`2.Keys">
            <summary>
            Gets the keys
            </summary>
        </member>
        <member name="P:DynamicData.IObservableCache`2.Items">
            <summary>
            Gets the Items
            </summary>
        </member>
        <member name="P:DynamicData.IObservableCache`2.KeyValues">
            <summary>
            Gets the key value pairs
            </summary>
        </member>
        <member name="M:DynamicData.IObservableCache`2.Lookup(`1)">
            <summary>
            Lookup a single item using the specified key.
            </summary>
            <remarks>
            Fast indexed lookup
            </remarks>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="P:DynamicData.IObservableCache`2.Count">
            <summary>
            The total count of cached items
            </summary>
        </member>
        <member name="T:DynamicData.IPagedChangeSet`2">
            <summary>
            A paged update collection
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
        </member>
        <member name="P:DynamicData.IPagedChangeSet`2.Response">
            <summary>
            The paramaters used to virtualise the stream
            </summary>
        </member>
        <member name="T:DynamicData.IQuery`2">
            <summary>
            Exposes internal cache state to enable querying
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
        </member>
        <member name="M:DynamicData.IQuery`2.Lookup(`1)">
            <summary>
            Lookup a single item using the specified key.
            </summary>
            <remarks>
            Fast indexed lookup
            </remarks>
            <param name="key">The key.</param>
        </member>
        <member name="P:DynamicData.IQuery`2.Keys">
            <summary>
            Gets the keys.
            </summary>
        </member>
        <member name="P:DynamicData.IQuery`2.Items">
            <summary>
            Gets the items.
            </summary>
        </member>
        <member name="P:DynamicData.IQuery`2.KeyValues">
            <summary>
            Gets the items together with their keys
            </summary>
            <value>
            The key values.
            </value>
        </member>
        <member name="P:DynamicData.IQuery`2.Count">
            <summary>
            Gets the count.
            </summary>
        </member>
        <member name="T:DynamicData.ISortedChangeSet`2">
            <summary>
            An update collection as per the system convention additionally providing a sorted set of the underling state
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
        </member>
        <member name="P:DynamicData.ISortedChangeSet`2.SortedItems">
            <summary>
            All cached items in sort order
            </summary>
        </member>
        <member name="T:DynamicData.ISortedChangeSetAdaptor`2">
            <summary>
            A simple adaptor to inject side effects into a sorted changeset observable
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
        </member>
        <member name="M:DynamicData.ISortedChangeSetAdaptor`2.Adapt(DynamicData.ISortedChangeSet{`0,`1})">
            <summary>
            Adapts the specified change.
            </summary>
            <param name="change">The change.</param>
        </member>
        <member name="T:DynamicData.ISourceCache`2">
            <summary>
            An observable cache which exposes an update API.  Used at the root
            of all observable chains
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
        </member>
        <member name="M:DynamicData.ISourceCache`2.BatchUpdate(System.Action{DynamicData.ISourceUpdater{`0,`1}})">
            <summary>
            Action to apply a batch update to a cache. Multiple update methods can be invoked within a single batch operation.
            These operations are invoked within the cache's lock and is therefore thread safe.
            
            The result of the action will produce a single changeset
            </summary>
            <param name="updateAction">The update action.</param>
        </member>
        <member name="T:DynamicData.ISourceUpdater`2">
            <summary>
            Api for updating  a source cache
            
            Use batch update to produce singular changeset.
            
            NB:The evaluate method is used to signal to any observing operators
            to  reevaluate whether the the object still matches downstream operators.
            This is primarily targeted to inline object changes such as datetime and calculated fields.
            
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
        </member>
        <member name="M:DynamicData.ISourceUpdater`2.Load(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Clears existing values and loads the sepcified items
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:DynamicData.ISourceUpdater`2.AddOrUpdate(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds or changes the specified items.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:DynamicData.ISourceUpdater`2.AddOrUpdate(`0)">
            <summary>
            Adds or update the item, 
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:DynamicData.ISourceUpdater`2.Evaluate(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Evaluates the specified items.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:DynamicData.ISourceUpdater`2.Evaluate(`0)">
             <summary>
            Evaluates the specified item
             </summary>
             <param name="item">The item.</param>
        </member>
        <member name="M:DynamicData.ISourceUpdater`2.Evaluate(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Evaluates the items matching the specified keys
            </summary>
            <param name="keys">The keys.</param>
        </member>
        <member name="M:DynamicData.ISourceUpdater`2.Evaluate(`1)">
            <summary>
            Evaluates the item matching the specified key
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:DynamicData.ISourceUpdater`2.Evaluate">
            <summary>
            Sends a signal for operators to recalculate it's state 
            </summary>
        </member>
        <member name="M:DynamicData.ISourceUpdater`2.Remove(System.Collections.Generic.IEnumerable{`0})">
             <summary>
            Removes the specified items
             </summary>
             <param name="items">The items.</param>
        </member>
        <member name="M:DynamicData.ISourceUpdater`2.Remove(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Removes the items matching the specified keys
            </summary>
            <param name="keys">The keys.</param>
        </member>
        <member name="M:DynamicData.ISourceUpdater`2.RemoveKeys(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Overload of remove due to ambiguous method when TObject and TKey are of the same type
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:DynamicData.ISourceUpdater`2.Remove(`0)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:DynamicData.ISourceUpdater`2.Remove(`1)">
            <summary>
            Remove the item with the specified key
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:DynamicData.ISourceUpdater`2.RemoveKey(`1)">
            <summary>
            Overload of remove due to ambiguous method when TObject and TKey are of the same type
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:DynamicData.ISourceUpdater`2.Clear">
            <summary>
            Clears all items from the underlying cache.
            </summary>
        </member>
        <member name="M:DynamicData.ISourceUpdater`2.Update(DynamicData.IChangeSet{`0,`1})">
            <summary>
            Updates using changes using the specified changeset
            </summary>
        </member>
        <member name="T:DynamicData.IVirtualChangeSet`2">
            <summary>
            Represents a subset of data reduced by a defined set of parameters
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
        </member>
        <member name="P:DynamicData.IVirtualChangeSet`2.Response">
            <summary>
            The paramaters used to virtualise the stream
            </summary>
        </member>
        <member name="T:DynamicData.IVirtualResponse">
            <summary>
            Defines values used to virtualise the result set
            </summary>
        </member>
        <member name="P:DynamicData.IVirtualResponse.Size">
            <summary>
            The requested size of the virtualised data
            </summary>
        </member>
        <member name="P:DynamicData.IVirtualResponse.StartIndex">
            <summary>
            The start index.
            </summary>
            
        </member>
        <member name="P:DynamicData.IVirtualResponse.TotalSize">
            <summary>
            Gets the total size of the underlying cache
            </summary>
            <value>
            The total size.
            </value>
        </member>
        <member name="T:DynamicData.IVirtualRequest">
            <summary>
            A request to virtualise a stream
            </summary>
        </member>
        <member name="P:DynamicData.IVirtualRequest.Size">
            <summary>
            The number of records to return
            </summary>
        </member>
        <member name="P:DynamicData.IVirtualRequest.StartIndex">
            <summary>
            The start index
            </summary>
        </member>
        <member name="T:DynamicData.Change`2">
            <summary>
              Container to describe a single change to a cache
            </summary>
        </member>
        <member name="M:DynamicData.Change`2.#ctor(DynamicData.ChangeReason,`1,`0,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicData.Change`2"/> struct.
            </summary>
            <param name="reason">The reason.</param>
            <param name="key">The key.</param>
            <param name="current">The current.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:DynamicData.Change`2.#ctor(`1,`0,System.Int32,System.Int32)">
            <summary>
            Construtor for ChangeReason.Move
            </summary>
            <param name="key">The key.</param>
            <param name="current">The current.</param>
            <param name="currentIndex">The CurrentIndex.</param>
            <param name="previousIndex">CurrentIndex of the previous.</param>
            <exception cref="T:System.ArgumentException">
            CurrentIndex must be greater than or equal to zero
            or
            PreviousIndex must be greater than or equal to zero
            </exception>
        </member>
        <member name="M:DynamicData.Change`2.#ctor(DynamicData.ChangeReason,`1,`0,DynamicData.Kernel.Optional{`0},System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicData.Change`2"/> struct.
            </summary>
            <param name="reason">The reason.</param>
            <param name="key">The key.</param>
            <param name="current">The current.</param>
            <param name="previous">The previous.</param>
            <param name="currentIndex">Value of the current.</param>
            <param name="previousIndex">Value of the previous.</param>
            <exception cref="T:System.ArgumentException">
            For ChangeReason.Add, a previous value cannot be specified
            or
            For ChangeReason.Change, must supply previous value
            </exception>
        </member>
        <member name="P:DynamicData.Change`2.Key">
            <summary>
            The unique key of the item which has changed
            </summary>
        </member>
        <member name="P:DynamicData.Change`2.Reason">
            <summary>
            The  reason for the change
            </summary>
        </member>
        <member name="P:DynamicData.Change`2.Current">
            <summary>
            The item which has changed
            </summary>
        </member>
        <member name="P:DynamicData.Change`2.CurrentIndex">
            <summary>
            The current index
            </summary>
        </member>
        <member name="P:DynamicData.Change`2.Previous">
            <summary>
            The previous change.
            
            This is only when Reason==ChangeReason.Update.
            </summary>
        </member>
        <member name="P:DynamicData.Change`2.PreviousIndex">
            <summary>
            The previous change.
            
            This is only when Reason==ChangeReason.Update or ChangeReason.Move.
            </summary>
        </member>
        <member name="M:DynamicData.Change`2.Equals(DynamicData.Change{`0,`1})">
            <summary>
             Determines whether the specified object, is equal to this instance.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.Change`2.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DynamicData.Change`2.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:DynamicData.Change`2.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:DynamicData.ChangeSet`2">
            <summary>
            A set of changes applied to the 
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
        </member>
        <member name="F:DynamicData.ChangeSet`2.Empty">
            <summary>
            An empty change set
            </summary>
        </member>
        <member name="M:DynamicData.ChangeSet`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicData.ChangeSet`2"/> class.
            </summary>
        </member>
        <member name="M:DynamicData.ChangeSet`2.#ctor(System.Collections.Generic.IEnumerable{DynamicData.Change{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicData.ChangeSet`2"/> class.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:DynamicData.ChangeSet`2.AddRange(System.Collections.Generic.IEnumerable{DynamicData.Change{`0,`1}})">
            <summary>
            Adds the specified items. 
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:DynamicData.ChangeSet`2.#ctor(DynamicData.Change{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicData.ChangeSet`2"/> class.
            </summary>
            <param name="change">The change.</param>
        </member>
        <member name="M:DynamicData.ChangeSet`2.#ctor(DynamicData.ChangeReason,`1,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicData.ChangeSet`2"/> class.
            </summary>
            <param name="reason">The reason.</param>
            <param name="key">The key.</param>
            <param name="current">The current.</param>
        </member>
        <member name="M:DynamicData.ChangeSet`2.#ctor(DynamicData.ChangeReason,`1,`0,DynamicData.Kernel.Optional{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicData.ChangeSet`2"/> class.
            </summary>
            <param name="reason">The reason.</param>
            <param name="key">The key.</param>
            <param name="current">The current.</param>
            <param name="previous">The previous.</param>
        </member>
        <member name="M:DynamicData.ChangeSet`2.Add(DynamicData.Change{`0,`1})">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:DynamicData.ChangeSet`2.Add(DynamicData.Change{`0,`1},System.Boolean)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="countOnly">set to true if the item has already been added</param>
        </member>
        <member name="P:DynamicData.ChangeSet`2.Capacity">
            <summary>
            Gets or sets the capacity.
            </summary>
            <value>
            The capacity.
            </value>
        </member>
        <member name="P:DynamicData.ChangeSet`2.Count">
            <summary>
                The total update count
            </summary>
        </member>
        <member name="P:DynamicData.ChangeSet`2.Adds">
            <summary>
                Gets the number of additions
            </summary>
        </member>
        <member name="P:DynamicData.ChangeSet`2.Updates">
            <summary>
                Gets the number of updates
            </summary>
        </member>
        <member name="P:DynamicData.ChangeSet`2.Removes">
            <summary>
                Gets the number of removes
            </summary>
        </member>
        <member name="P:DynamicData.ChangeSet`2.Evaluates">
            <summary>
                The number of requeries
            </summary>
        </member>
        <member name="P:DynamicData.ChangeSet`2.Moves">
            <summary>
                Gets the number of moves
            </summary>
        </member>
        <member name="M:DynamicData.ChangeSet`2.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DynamicData.ChangeSet`2.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:DynamicData.IIntermediateUpdater`2">
            <summary>
            Api for updating  an intermediate cache
            
            Use batch update to produce singular changeset.
            
            NB:The evaluate method is used to signal to any observing operators
            to  reevaluate whether the the object still matches downstream operators.
            This is primarily targeted to inline object changes such as datetime and calculated fields.
            
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
        </member>
        <member name="M:DynamicData.IIntermediateUpdater`2.AddOrUpdate(`0,`1)">
            <summary>
            Adds or updates the specified item / key pair
            </summary>
        </member>
        <member name="M:DynamicData.IIntermediateUpdater`2.Evaluate">
            <summary>
            Sends a signal for operators to recalculate it's state 
            </summary>
        </member>
        <member name="M:DynamicData.IIntermediateUpdater`2.Evaluate(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Evaluates the items matching the specified keys
            </summary>
            <param name="keys">The keys.</param>
        </member>
        <member name="M:DynamicData.IIntermediateUpdater`2.Evaluate(`1)">
            <summary>
            Evaluates the item matching the specified key
            </summary>
        </member>
        <member name="M:DynamicData.IIntermediateUpdater`2.Remove(System.Collections.Generic.IEnumerable{`1})">
             <summary>
            Removes the specified keys
             </summary>
        </member>
        <member name="M:DynamicData.IIntermediateUpdater`2.Remove(`1)">
             <summary>
            Remove the specified keys
             </summary>
        </member>
        <member name="M:DynamicData.IIntermediateUpdater`2.Update(DynamicData.IChangeSet{`0,`1})">
            <summary>
            Updates using changes using the specified changeset
            </summary>
        </member>
        <member name="M:DynamicData.IIntermediateUpdater`2.Clear">
            <summary>
            Clears all items from the underlying cache.
            </summary>
        </member>
        <member name="M:DynamicData.IIntermediateUpdater`2.AsChangeSet">
            <summary>
            Acccummulation of updates since last call of this method
            </summary>
            <returns></returns>
        </member>
        <member name="T:DynamicData.IKeyValueCollection`2">
            <summary>
            
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
        </member>
        <member name="P:DynamicData.IKeyValueCollection`2.Comparer">
            <summary>
            Gets the comparer used to peform the sort
            </summary>
            <value>
            The comparer.
            </value>
        </member>
        <member name="P:DynamicData.IKeyValueCollection`2.Count">
            <summary>
            The count of items.
            </summary>
            <value>
            The count.
            </value>
        </member>
        <member name="P:DynamicData.IKeyValueCollection`2.SortReason">
            <summary>
            Gets the reason for a sort being applied.
            </summary>
            <value>
            The sort reason.
            </value>
        </member>
        <member name="P:DynamicData.IKeyValueCollection`2.Optimisations">
            <summary>
            Gets the optimisations used to produce the sort
            </summary>
            <value>
            The optimisations.
            </value>
        </member>
        <member name="P:DynamicData.IKeyValueCollection`2.Item(System.Int32)">
            <summary>
            Gets the element at the specified index in the read-only list.
            </summary>
            
            <returns>
            The element at the specified index in the read-only list.
            </returns>
            <param name="index">The zero-based index of the element to get. </param>
            <returns></returns>
        </member>
        <member name="T:DynamicData.IntermediateCache`2">
            <summary>
            Cache designed to be used for custom operator construction.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
        </member>
        <member name="M:DynamicData.IntermediateCache`2.#ctor(System.IObservable{DynamicData.IChangeSet{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicData.IntermediateCache`2"/> class.
            </summary>
            <param name="source">The source.</param>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:DynamicData.IntermediateCache`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicData.IntermediateCache`2"/> class.
            </summary>
        </member>
        <member name="M:DynamicData.IntermediateCache`2.BatchUpdate(System.Action{DynamicData.IIntermediateUpdater{`0,`1}})">
            <summary>
            Action to apply a batch update to a cache. Multiple update methods can be invoked within a single batch operation.
            These operations are invoked within the cache's lock and is therefore thread safe.
            
            The result of the action will produce a single changeset
            </summary>
            <param name="updateAction">The update action.</param>
        </member>
        <member name="P:DynamicData.IntermediateCache`2.CountChanged">
            <summary>
            A count changed observable starting with the current count
            </summary>
        </member>
        <member name="M:DynamicData.IntermediateCache`2.Connect(System.Func{`0,System.Boolean})">
            <summary>
            Returns a filtered changeset of cache changes preceeded with the initial state
            </summary>
            <param name="filter">The filter.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.IntermediateCache`2.Connect">
            <summary>
            Returns a observable of cache changes preceeded with the initital cache state
            </summary>
            <returns></returns>
        </member>
        <member name="M:DynamicData.IntermediateCache`2.Watch(`1)">
            <summary>
            Returns an observable of any changes which match the specified key.  The sequence starts with the inital item in the cache (if there is one).
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="P:DynamicData.IntermediateCache`2.Count">
            <summary>
            The total count of cached items
            </summary>
        </member>
        <member name="P:DynamicData.IntermediateCache`2.Items">
            <summary>
            Gets the Items
            </summary>
        </member>
        <member name="P:DynamicData.IntermediateCache`2.KeyValues">
            <summary>
            Gets the key value pairs
            </summary>
        </member>
        <member name="P:DynamicData.IntermediateCache`2.Keys">
            <summary>
            Gets the keys
            </summary>
        </member>
        <member name="M:DynamicData.IntermediateCache`2.Lookup(`1)">
            <summary>
            Lookup a single item using the specified key.
            </summary>
            <remarks>
            Fast indexed lookup
            </remarks>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.IntermediateCache`2.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="T:DynamicData.ObservableCache`2">
            <summary>
            An observable cache
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
        </member>
        <member name="T:DynamicData.MissingKeyException">
            <summary>
            Thrown when a key is expected in a cache but not found
            </summary>
        </member>
        <member name="M:DynamicData.MissingKeyException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicData.MissingKeyException"/> class.
            </summary>
        </member>
        <member name="M:DynamicData.MissingKeyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicData.MissingKeyException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:DynamicData.MissingKeyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicData.MissingKeyException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:DynamicData.ChangeSet`1">
            <summary>
            A set of changes which has occured since the last reported change
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
        </member>
        <member name="F:DynamicData.ChangeSet`1.Empty">
            <summary>
            An empty change set
            </summary>
        </member>
        <member name="M:DynamicData.ChangeSet`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicData.ChangeSet`1"/> class.
            </summary>
        </member>
        <member name="M:DynamicData.ChangeSet`1.#ctor(System.Collections.Generic.IEnumerable{DynamicData.Change{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicData.ChangeSet`1" /> class.
            </summary>
            <param name="items">The items.</param>
            <exception cref="T:System.ArgumentNullException">items</exception>
        </member>
        <member name="M:DynamicData.ChangeSet`1.Add(DynamicData.Change{`0})">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:DynamicData.ChangeSet`1.AddRange(System.Collections.Generic.IEnumerable{DynamicData.Change{`0}})">
            <summary>
            Adds the specified items.
            </summary>
            <param name="items">The items.</param>
            <exception cref="T:System.ArgumentNullException">items</exception>
        </member>
        <member name="M:DynamicData.ChangeSet`1.Add(DynamicData.Change{`0},System.Boolean)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="countOnly">set to true if the item has already been added</param>
        </member>
        <member name="P:DynamicData.ChangeSet`1.Capacity">
            <summary>
            Gets or sets the capacity.
            </summary>
            <value>
            The capacity.
            </value>
        </member>
        <member name="P:DynamicData.ChangeSet`1.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:DynamicData.Change`1"/> at the specified index.
            </summary>
            <value>
            The <see cref="T:DynamicData.Change`1"/>.
            </value>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="P:DynamicData.ChangeSet`1.Adds">
            <summary>
                Gets the number of additions
            </summary>
        </member>
        <member name="P:DynamicData.ChangeSet`1.Updates">
            <summary>
                Gets the number of updates
            </summary>
        </member>
        <member name="P:DynamicData.ChangeSet`1.Removes">
            <summary>
                Gets the number of removes
            </summary>
        </member>
        <member name="P:DynamicData.ChangeSet`1.Evaluates">
            <summary>
                Gets the number of requeries
            </summary>
        </member>
        <member name="P:DynamicData.ChangeSet`1.Moves">
            <summary>
                Gets the number of moves
            </summary>
        </member>
        <member name="P:DynamicData.ChangeSet`1.Count">
            <summary>
                The total update count
            </summary>
        </member>
        <member name="M:DynamicData.ChangeSet`1.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DynamicData.ChangeSet`1.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:DynamicData.IExtendedList`1">
            <summary>
            Represents a list which supports range operations
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:DynamicData.IExtendedList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection to the end of the collection.
            </summary>
            <param name="collection">The collection whose elements should be added to the end of the <see cref="T:System.Collections.Generic.List`1"/>. The collection itself cannot be null, but it can contain elements that are null, if type <paramref name="T"/> is a reference type.</param><exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null.</exception>
        </member>
        <member name="M:DynamicData.IExtendedList`1.InsertRange(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            Inserts the elements of a collection into the <see cref="T:System.Collections.Generic.List`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which the new elements should be inserted.</param><param name="collection">The collection whose elements should be inserted into the <see cref="T:System.Collections.Generic.List`1"/>. The collection itself cannot be null, but it can contain elements that are null, if type <paramref name="T"/> is a reference type.</param><exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0.-or-<paramref name="index"/> is greater than <see cref="P:System.Collections.Generic.List`1.Count"/>.</exception>
        </member>
        <member name="M:DynamicData.IExtendedList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <param name="index">The zero-based starting index of the range of elements to remove.</param><param name="count">The number of elements to remove.</param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0.-or-<paramref name="count"/> is less than 0.</exception><exception cref="T:System.ArgumentException"><paramref name="index"/> and <paramref name="count"/> do not denote a valid range of elements in the <see cref="T:System.Collections.Generic.List`1"/>.</exception>
        </member>
        <member name="M:DynamicData.IExtendedList`1.Move(System.Int32,System.Int32)">
            <summary>
            Moves an item from the original to the destination index
            </summary>
            <param name="original">The original.</param>
            <param name="destination">The destination.</param>
        </member>
        <member name="T:DynamicData.ItemChange`1">
            <summary>
            Container to describe a single change to a cache
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:DynamicData.ItemChange`1.Empty">
            <summary>
            An empty change
            </summary>
        </member>
        <member name="P:DynamicData.ItemChange`1.Current">
            <summary>
            The item which has changed
            </summary>
        </member>
        <member name="P:DynamicData.ItemChange`1.CurrentIndex">
            <summary>
            The current index
            </summary>
        </member>
        <member name="P:DynamicData.ItemChange`1.Previous">
            <summary>
            The previous change.
            
            This is only when Reason==ChangeReason.Update.
            </summary>
        </member>
        <member name="P:DynamicData.ItemChange`1.PreviousIndex">
            <summary>
            The previous index.
            
            This is only when Reason==ChangeReason.Update or ChangeReason.Move.
            </summary>
        </member>
        <member name="M:DynamicData.ItemChange`1.#ctor(`0,DynamicData.Kernel.Optional{`0},System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicData.Change`2" /> struct.
            </summary>
            <param name="current">The current.</param>
            <param name="previous">The previous.</param>
            <param name="currentIndex">Value of the current.</param>
            <param name="previousIndex">Value of the previous.</param>
            <exception cref="T:System.ArgumentException">
            For ChangeReason.Add, a previous value cannot be specified
            or
            For ChangeReason.Change, must supply previous value
            </exception>
            <exception cref="T:System.ArgumentException">For ChangeReason.Add, a previous value cannot be specified
            or
            For ChangeReason.Change, must supply previous value</exception>
        </member>
        <member name="M:DynamicData.ItemChange`1.Equals(DynamicData.ItemChange{`0})">
            <summary>
             Determines whether the specified object, is equal to this instance.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.ItemChange`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DynamicData.ItemChange`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:DynamicData.ItemChange`1.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:DynamicData.ListChangeEx">
            <summary>
            
            </summary>
        </member>
        <member name="M:DynamicData.ListChangeEx.Filter``1(System.Collections.Generic.IList{``0},DynamicData.IChangeSet{``0},System.Func{``0,System.Boolean})">
            <summary>
            Filters the source from the changes, using the specified predicate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="changes">The changes.</param>
            <param name="predicate">The predicate.</param>
        </member>
        <member name="M:DynamicData.ListChangeEx.Transform``2(System.Collections.Generic.IList{``1},DynamicData.IChangeSet{``0},System.Func{``0,``1})">
            <summary>
            Clones the source list with the specified change set, transforming the items using the specified factory
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <param name="source">The source.</param>
            <param name="changes">The changes.</param>
            <param name="transformFactory">The transform factory.</param>
            <exception cref="T:System.ArgumentNullException">
            source
            or
            changes
            or
            transformFactory
            </exception>
        </member>
        <member name="M:DynamicData.ListChangeEx.Clone``1(System.Collections.Generic.IList{``0},DynamicData.IChangeSet{``0})">
            <summary>
            Clones the list from the specified change set
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="changes">The changes.</param>
            <exception cref="T:System.ArgumentNullException">
            source
            or
            changes
            </exception>
        </member>
        <member name="T:DynamicData.ListChangeReason">
            <summary>
             The reason for an individual change to an observable list
            
            Used to signal consumers of any changes to the underlying cache
            </summary>
        </member>
        <member name="F:DynamicData.ListChangeReason.Add">
            <summary>
             An item has been added
            </summary>
        </member>
        <member name="F:DynamicData.ListChangeReason.AddRange">
            <summary>
            A range of items has been added
            </summary>
        </member>
        <member name="F:DynamicData.ListChangeReason.Update">
            <summary>
             An item has been updated
            </summary>
        </member>
        <member name="F:DynamicData.ListChangeReason.Remove">
            <summary>
             An item has removed
            </summary>
        </member>
        <member name="F:DynamicData.ListChangeReason.RemoveRange">
            <summary>
            A range of items has been removed
            </summary>
        </member>
        <member name="F:DynamicData.ListChangeReason.Moved">
            <summary>
            An item has been moved in a sorted collection
            </summary>
        </member>
        <member name="F:DynamicData.ListChangeReason.Clear">
            <summary>
            The entire collection has been cleared
            </summary>
        </member>
        <member name="T:DynamicData.ListEx">
            <summary>
            Extensions to help with maintainence of a list
            </summary>
        </member>
        <member name="M:DynamicData.ListEx.BinarySearch``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Performs a binary search on the specified collection.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <param name="list">The list to be searched.</param>
            <param name="value">The value to search for.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.ListEx.BinarySearch``1(System.Collections.Generic.IList{``0},``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Performs a binary search on the specified collection.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <param name="list">The list to be searched.</param>
            <param name="value">The value to search for.</param>
            <param name="comparer">The comparer that is used to compare the value with the list items.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.ListEx.BinarySearch``2(System.Collections.Generic.IList{``0},``1,System.Func{``1,``0,System.Int32})">
            <summary>
            Performs a binary search on the specified collection.
            
            Thanks to http://stackoverflow.com/questions/967047/how-to-perform-a-binary-search-on-ilistt
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <typeparam name="TSearch">The type of the searched item.</typeparam>
            <param name="list">The list to be searched.</param>
            <param name="value">The value to search for.</param>
            <param name="comparer">The comparer that is used to compare the value with the list items.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.ListEx.Lookup``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Lookups the item using the specified comparer. If matched, the item's index is also returned
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="item">The item.</param>
            <param name="equalityComparer">The equality comparer.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.ListEx.Add``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the  items to the specified list
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="items">The items.</param>
            <exception cref="T:System.ArgumentNullException">
            source
            or
            items
            </exception>
        </member>
        <member name="M:DynamicData.ListEx.Remove``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Removes the  items from the specified list
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="items">The items.</param>
            <exception cref="T:System.ArgumentNullException">
            source
            or
            items
            </exception>
        </member>
        <member name="M:DynamicData.ListEx.Replace``1(System.Collections.Generic.IList{``0},``0,``0)">
            <summary>
            Replaces the specified item.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="original">The original.</param>
            <param name="replacewith">The replacewith.</param>
            <exception cref="T:System.ArgumentNullException">source
            or
            items</exception>
        </member>
        <member name="M:DynamicData.ListEx.EnsureCapacityFor``1(System.Collections.Generic.IEnumerable{``0},DynamicData.IChangeSet)">
            <summary>
            Ensures the collection has enough capacity where capacity
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The enumerable.</param>
            <param name="changes">The changes.</param>
            <exception cref="T:System.ArgumentNullException">enumerable</exception>
        </member>
        <member name="T:DynamicData.IChangeSet`1">
            <summary>
            A collection of changes.
            
            Changes are always published in the order.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
        </member>
        <member name="P:DynamicData.ChangeAwareList`1.Last">
            <summary>
            Gets the last change in the collection
            </summary>
        </member>
        <member name="T:DynamicData.IObservableList`1">
            <summary>
            A readonly observable list, providing  observable methods
            as well as data access methods
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:DynamicData.IObservableList`1.Connect(System.Func{`0,System.Boolean})">
            <summary>
            Connect to the observable list and observe any changes
            starting with the list's initial items.
            </summary>
            <returns></returns>
        </member>
        <member name="P:DynamicData.IObservableList`1.CountChanged">
            <summary>
            Observe the count changes, starting with the inital items count
            </summary>
        </member>
        <member name="M:DynamicData.IObservableList`1.Lookup(`0,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Lookups the item using the specified equality comparer
            </summary>
            <param name="item">The item.</param>
            <param name="equalityComparer">The equality comparer.</param>
            <returns>An ItemWithIndex container which contains the item with it's index</returns>
        </member>
        <member name="P:DynamicData.IObservableList`1.Items">
            <summary>
            Items enumerable
            </summary>
        </member>
        <member name="P:DynamicData.IObservableList`1.Count">
            <summary>
            Gets the count.
            </summary>
        </member>
        <member name="T:DynamicData.ISourceList`1">
            <summary>
            An editable observable list, providing  observable methods
            as well as data access methods
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:DynamicData.ISourceList`1.Edit(System.Action{DynamicData.IExtendedList{`0}})">
            <summary>
            Edit the inner list within the list's internal locking mechanism
            </summary>
            <param name="updateAction">The update action.</param>
        </member>
        <member name="T:DynamicData.ObservableListEx">
            <summary>
            Extenssions for ObservableList
            </summary>
        </member>
        <member name="M:DynamicData.ObservableListEx.LimitSizeTo``1(DynamicData.ISourceList{``0},System.Int32,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Limits the size of the source cache to the specified limit
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="sizeLimit">The size limit.</param>
            <param name="scheduler">The scheduler.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">sizeLimit cannot be zero</exception>
            <exception cref="T:System.ArgumentNullException">source</exception>
            <exception cref="T:System.ArgumentException">sizeLimit cannot be zero</exception>
        </member>
        <member name="M:DynamicData.ObservableListEx.Bind``1(System.IObservable{DynamicData.IChangeSet{``0}},DynamicData.Binding.IObservableCollection{``0},System.Int32)">
            <summary>
            Binds a clone of the observable changeset to the target observable collection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="targetCollection">The target collection.</param>
            <param name="resetThreshold">The reset threshold.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            source
            or
            targetCollection
            </exception>
        </member>
        <member name="M:DynamicData.ObservableListEx.Adapt``1(System.IObservable{DynamicData.IChangeSet{``0}},DynamicData.IChangeSetAdaptor{``0})">
            <summary>
            Injects a side effect into a changeset observable
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="adaptor">The adaptor.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            source
            or
            adaptor
            </exception>
        </member>
        <member name="M:DynamicData.ObservableListEx.PopulateInto``1(System.IObservable{DynamicData.IChangeSet{``0}},DynamicData.ISourceList{``0})">
            <summary>
            list.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            source
            or
            destination
            </exception>
            <exception cref="T:System.ArgumentNullException">source
            or
            destination</exception>
        </member>
        <member name="M:DynamicData.ObservableListEx.AsObservableList``1(DynamicData.ISourceList{``0})">
            <summary>
            Converts the source list to an read only observable list
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:DynamicData.ObservableListEx.AsObservableList``1(System.IObservable{DynamicData.IChangeSet{``0}})">
            <summary>
            Converts the source observable to an read only observable list
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:DynamicData.ObservableListEx.Filter``1(System.IObservable{DynamicData.IChangeSet{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filters the source using the specified valueSelector
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="predicate">The valueSelector.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:DynamicData.ObservableListEx.Filter``1(System.IObservable{DynamicData.IChangeSet{``0}},DynamicData.Controllers.FilterController{``0},DynamicData.FilterPolicy)">
            <summary>
            Filters the specified filter controller.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="filterController">The filter controller.</param>
            <param name="filterPolicy">The filter policy.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source
            or
            filterController</exception>
        </member>
        <member name="M:DynamicData.ObservableListEx.Sort``1(System.IObservable{DynamicData.IChangeSet{``0}},System.Collections.Generic.IComparer{``0},DynamicData.SortOptions)">
            <summary>
            Sorts the sequence using the specified comparer.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="comparer">The comparer.</param>
            <param name="options">The options.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            source
            or
            comparer
            </exception>
        </member>
        <member name="M:DynamicData.ObservableListEx.Transform``2(System.IObservable{DynamicData.IChangeSet{``0}},System.Func{``0,``1})">
            <summary>
            Projects each update item to a new form using the specified transform function
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <param name="source">The source.</param>
            <param name="transformFactory">The transform factory.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            source
            or
            valueSelector
            </exception>
        </member>
        <member name="M:DynamicData.ObservableListEx.TransformMany``2(System.IObservable{DynamicData.IChangeSet{``1}},System.Func{``1,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Equivalent to a select many transform. To work, the key must individually identify each child.
            **** Assumes each child can only have one  parent - support for children with multiple parents is a work in progresss
            </summary>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The source.</param>
            <param name="manyselector">The manyselector.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            source
            or
            manyselector
            </exception>
        </member>
        <member name="M:DynamicData.ObservableListEx.DistinctValues``2(System.IObservable{DynamicData.IChangeSet{``0}},System.Func{``0,``1})">
            <summary>
            Selects distinct values from the source, using the specified value selector
            </summary>
            <typeparam name="TObject">The type of the source.</typeparam>
            <typeparam name="TValue">The type of the destination.</typeparam>
            <param name="source">The source.</param>
            <param name="valueSelector">The transform factory.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            source
            or
            valueSelector
            </exception>
        </member>
        <member name="M:DynamicData.ObservableListEx.GroupOn``2(System.IObservable{DynamicData.IChangeSet{``0}},System.Func{``0,``1})">
            <summary>
             Groups the source on the value returned by group selector factory. 
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TGroup">The type of the group.</typeparam>
            <param name="source">The source.</param>
            <param name="groupSelector">The group selector.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            source
            or
            groupSelector
            </exception>
        </member>
        <member name="M:DynamicData.ObservableListEx.NotEmpty``1(System.IObservable{DynamicData.IChangeSet{``0}})">
            <summary>
            Prevents an empty notification
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:DynamicData.ObservableListEx.Clone``1(System.IObservable{DynamicData.IChangeSet{``0}},System.Collections.Generic.IList{``0})">
            <summary>
            Clones the target list as a side effect of the stream
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="target"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:DynamicData.ObservableListEx.MergeMany``2(System.IObservable{DynamicData.IChangeSet{``0}},System.Func{``0,System.IObservable{``1}})">
            <summary>
            Dynamically merges the observable which is selected from each item in the stream, and unmerges the item
            when it is no longer part of the stream.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <param name="source">The source.</param>
            <param name="observableSelector">The observable selector.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source
            or
            observableSelector</exception>
        </member>
        <member name="M:DynamicData.ObservableListEx.SubscribeMany``1(System.IObservable{DynamicData.IChangeSet{``0}},System.Func{``0,System.IDisposable})">
            <summary>
            Subscribes to each item when it is added to the stream and unsubcribes when it is removed.  All items will be unsubscribed when the stream is disposed
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="source">The source.</param>
            <param name="subscriptionFactory">The subsription function</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source
            or
            subscriptionFactory</exception>
            <remarks>
            Subscribes to each item when it is added or updates and unsubcribes when it is removed
            </remarks>
        </member>
        <member name="M:DynamicData.ObservableListEx.DisposeMany``1(System.IObservable{DynamicData.IChangeSet{``0}})">
            <summary>
            Disposes each item when no longer required.
            
            Individual items are disposed when removed or replaced. All items
            are disposed when the stream is disposed
            </summary>
            <remarks>
            </remarks>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="source">The source.</param>
            <returns>A continuation of the original stream</returns>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:DynamicData.ObservableListEx.OnItemRemoved``1(System.IObservable{DynamicData.IChangeSet{``0}},System.Action{``0})">
            <summary>
            Callback for each item as and when it is being removed from the stream
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="source">The source.</param>
            <param name="removeAction">The remove action.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            source
            or
            removeAction
            </exception>
        </member>
        <member name="M:DynamicData.ObservableListEx.WhereReasonsAre``1(System.IObservable{DynamicData.IChangeSet{``0}},DynamicData.ListChangeReason[])">
            <summary>
            Includes changes for the specified reasons only
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="reasons">The reasons.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Must enter at least 1 reason</exception>
        </member>
        <member name="M:DynamicData.ObservableListEx.WhereReasonsAreNot``1(System.IObservable{DynamicData.IChangeSet{``0}},DynamicData.ListChangeReason[])">
            <summary>
            Excludes updates for the specified reasons
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="reasons">The reasons.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Must enter at least 1 reason</exception>
        </member>
        <member name="M:DynamicData.ObservableListEx.FlattenBufferResult``1(System.IObservable{System.Collections.Generic.IList{DynamicData.IChangeSet{``0}}})">
            <summary>
            Convert the result of a buffer operation to a change set
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.ObservableListEx.BufferIf``1(System.IObservable{DynamicData.IChangeSet{``0}},System.IObservable{System.Boolean},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Batches the underlying updates if a pause signal (i.e when the buffer selector return true) has been received.
            When a resume signal has been received the batched updates will  be fired.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="source">The source.</param>
            <param name="pauseIfTrueSelector">When true, observable begins to buffer and when false, window closes and buffered result if notified</param>
            <param name="scheduler">The scheduler.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:DynamicData.ObservableListEx.BufferIf``1(System.IObservable{DynamicData.IChangeSet{``0}},System.IObservable{System.Boolean},System.Boolean,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Batches the underlying updates if a pause signal (i.e when the buffer selector return true) has been received.
            When a resume signal has been received the batched updates will  be fired.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="source">The source.</param>
            <param name="pauseIfTrueSelector">When true, observable begins to buffer and when false, window closes and buffered result if notified</param>
            <param name="intialPauseState">if set to <c>true</c> [intial pause state].</param>
            <param name="scheduler">The scheduler.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:DynamicData.ObservableListEx.BufferIf``1(System.IObservable{DynamicData.IChangeSet{``0}},System.IObservable{System.Boolean},System.Nullable{System.TimeSpan},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Batches the underlying updates if a pause signal (i.e when the buffer selector return true) has been received.
            When a resume signal has been received the batched updates will  be fired.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="source">The source.</param>
            <param name="pauseIfTrueSelector">When true, observable begins to buffer and when false, window closes and buffered result if notified</param>
            <param name="timeOut">Specify a time to ensure the buffer window does not stay open for too long</param>
            <param name="scheduler">The scheduler.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:DynamicData.ObservableListEx.BufferIf``1(System.IObservable{DynamicData.IChangeSet{``0}},System.IObservable{System.Boolean},System.Boolean,System.Nullable{System.TimeSpan},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Batches the underlying updates if a pause signal (i.e when the buffer selector return true) has been received.
            When a resume signal has been received the batched updates will  be fired.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="source">The source.</param>
            <param name="pauseIfTrueSelector">When true, observable begins to buffer and when false, window closes and buffered result if notified</param>
            <param name="intialPauseState">if set to <c>true</c> [intial pause state].</param>
            <param name="timeOut">Specify a time to ensure the buffer window does not stay open for too long</param>
            <param name="scheduler">The scheduler.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:DynamicData.ObservableListEx.QueryWhenChanged``2(System.IObservable{DynamicData.IChangeSet{``0}},System.Func{System.Collections.Generic.IList{``0},``1})">
            <summary>
             The latest copy of the cache is exposed for querying after each modification to the underlying data
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <param name="source">The source.</param>
            <param name="resultSelector">The result selector.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            source
            or
            resultSelector
            </exception>
        </member>
        <member name="M:DynamicData.ObservableListEx.QueryWhenChanged``1(System.IObservable{DynamicData.IChangeSet{``0}})">
            <summary>
            The latest copy of the cache is exposed for querying i)  after each modification to the underlying data ii) upon subscription
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="source">The source.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:DynamicData.ObservableListEx.SkipInitial``1(System.IObservable{DynamicData.IChangeSet{``0}})">
            <summary>
            Defer the subscribtion until loaded and skip initial changeset
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="source">The source.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:DynamicData.ObservableListEx.DeferUntilLoaded``1(System.IObservable{DynamicData.IChangeSet{``0}})">
            <summary>
            Defer the subscription until the stream has been inflated with data
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.ObservableListEx.DeferUntilLoaded``1(DynamicData.IObservableList{``0})">
            <summary>
            Defer the subscription until the cache has been inflated with data
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.ObservableListEx.Virtualise``1(System.IObservable{DynamicData.IChangeSet{``0}},DynamicData.Controllers.VirtualisingController)">
            <summary>
            Virtualises the source using parameters provided by the specified virtualising controller
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="virtualisingController">The virtualising controller.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.ObservableListEx.Top``1(System.IObservable{DynamicData.IChangeSet{``0}},System.Int32)">
            <summary>
            Limits the size of the result set to the specified number of items
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="numberOfItems">The number of items.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.ObservableListEx.Page``1(System.IObservable{DynamicData.IChangeSet{``0}},DynamicData.Controllers.PageController)">
            <summary>
            Applies paging to the the data source
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="pageController">The page controller.</param>
            <returns></returns>
        </member>
        <member name="T:DynamicData.RangeChange`1">
            <summary>
            Multipe change container
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:DynamicData.RangeChange`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicData.RangeChange`1"/> class.
            </summary>
            <param name="items">The items.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:DynamicData.RangeChange`1.Add(`0)">
            <summary>
            Adds the specified item to the range.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:DynamicData.RangeChange`1.Insert(System.Int32,`0)">
            <summary>
            Inserts the  item in the range at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:DynamicData.RangeChange`1.SetStartingIndex(System.Int32)">
            <summary>
            Sets the index of the starting index of the range
            </summary>
            <param name="index">The index.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:DynamicData.RangeChange`1.Count">
            <summary>
                The total update count
            </summary>
        </member>
        <member name="P:DynamicData.RangeChange`1.Index">
            <summary>
            Gets the index initial index i.e. for the initial starting point of the range insertion
            </summary>
            <value>
            The index.
            </value>
        </member>
        <member name="M:DynamicData.RangeChange`1.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DynamicData.RangeChange`1.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:DynamicData.UnspecifiedIndexException">
            <summary>
            Thrown when an index is expected but not specified
            </summary>
        </member>
        <member name="M:DynamicData.UnspecifiedIndexException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicData.UnspecifiedIndexException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:DynamicData.UnspecifiedIndexException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicData.UnspecifiedIndexException"/> class.
            </summary>
        </member>
        <member name="M:DynamicData.UnspecifiedIndexException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicData.UnspecifiedIndexException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:DynamicData.SortException">
            <summary>
            Thrown when an exception occurs within the sort operators
            </summary>
        </member>
        <member name="M:DynamicData.SortException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicData.SortException"/> class.
            </summary>
        </member>
        <member name="M:DynamicData.SortException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicData.SortException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:DynamicData.SortException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicData.SortException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:DynamicData.SortOptions">
            <summary>
            Options for sortinig
            </summary>
        </member>
        <member name="F:DynamicData.SortOptions.None">
            <summary>
            No sort options are specified. 
            </summary>
        </member>
        <member name="F:DynamicData.SortOptions.UseBinarySearch">
            <summary>
            Use binary search to locate item index.
            </summary>
        </member>
        <member name="T:DynamicData.SourceList`1">
            <summary>
            An editable observable list
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
        </member>
        <member name="M:DynamicData.SourceList`1.#ctor(System.IObservable{DynamicData.IChangeSet{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicData.SourceList`1"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:DynamicData.SourceList`1.Edit(System.Action{DynamicData.IExtendedList{`0}})">
            <summary>
            Edit the inner list within the list's internal locking mechanism
            </summary>
            <param name="updateAction">The update action.</param>
        </member>
        <member name="M:DynamicData.SourceList`1.Lookup(`0,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Lookups the item using the specified equality comparer
            </summary>
            <param name="item">The item.</param>
            <param name="equalityComparer">The equality comparer.</param>
            <returns>
            An ItemWithIndex container which contains the item with it's index
            </returns>
        </member>
        <member name="P:DynamicData.SourceList`1.Items">
            <summary>
            Gets or sets the items.
            </summary>
            <value>
            The items.
            </value>
        </member>
        <member name="P:DynamicData.SourceList`1.Count">
            <summary>
            Gets or sets the count.
            </summary>
            <value>
            The count.
            </value>
        </member>
        <member name="P:DynamicData.SourceList`1.CountChanged">
            <summary>
            Gets or sets the count changed.
            </summary>
            <value>
            The count changed.
            </value>
        </member>
        <member name="M:DynamicData.SourceList`1.Connect(System.Func{`0,System.Boolean})">
            <summary>
            Connects using the specified predicate.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.SourceList`1.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="T:DynamicData.SourceListEditConvenienceEx">
            <summary>
            Convenience methods for a source list
            </summary>
        </member>
        <member name="M:DynamicData.SourceListEditConvenienceEx.Clear``1(DynamicData.ISourceList{``0})">
            <summary>
            Clears all items from the specified source list
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
        </member>
        <member name="M:DynamicData.SourceListEditConvenienceEx.Add``1(DynamicData.ISourceList{``0},``0)">
            <summary>
            Adds the specified item to the source list
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:DynamicData.SourceListEditConvenienceEx.Insert``1(DynamicData.ISourceList{``0},System.Int32,``0)">
            <summary>
            Adds the specified item to the source list
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="item">The item.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:DynamicData.SourceListEditConvenienceEx.AddRange``1(DynamicData.ISourceList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the specified items to the source list
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="items">The items.</param>
        </member>
        <member name="M:DynamicData.SourceListEditConvenienceEx.InsertRange``1(DynamicData.ISourceList{``0},System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Inserts the elements of a collection into the <see cref="T:System.Collections.Generic.List`1" /> at the specified index.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="items">The items.</param>
            <param name="index">The zero-based index at which the new elements should be inserted.</param>
        </member>
        <member name="M:DynamicData.SourceListEditConvenienceEx.Remove``1(DynamicData.ISourceList{``0},``0)">
            <summary>
            Removes the specified item from the source list
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:DynamicData.SourceListEditConvenienceEx.Move``1(DynamicData.ISourceList{``0},System.Int32,System.Int32)">
            <summary>
            Moves an item from the original to the destination index
            </summary>
             <param name="source">The source.</param>
            <param name="original">The original.</param>
            <param name="destination">The destination.</param>
        </member>
        <member name="M:DynamicData.SourceListEditConvenienceEx.RemoveRange``1(DynamicData.ISourceList{``0},System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the <see cref="T:System.Collections.Generic.List`1" />.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="index">The zero-based starting index of the range of elements to remove.</param>
            <param name="count">The number of elements to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> is less than 0.-or-<paramref name="count" /> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="index" /> and <paramref name="count" /> do not denote a valid range of elements in the <see cref="T:System.Collections.Generic.List`1" />.</exception>
        </member>
        <member name="M:DynamicData.SourceListEditConvenienceEx.RemoveAt``1(DynamicData.ISourceList{``0},System.Int32)">
            <summary>
            Removes the element at the spedified index
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:DynamicData.SourceListEditConvenienceEx.Replace``1(DynamicData.ISourceList{``0},``0,``0)">
            <summary>
            Replaces the specified original with the destinaton object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="original">The original.</param>
            <param name="destination">The destination.</param>
        </member>
        <member name="M:DynamicData.SourceListEditConvenienceEx.Replace``1(DynamicData.ISourceList{``0},System.Int32,``0)">
            <summary>
            Replaces the item at 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="T:DynamicData.Tests.ChangeSetAggregator`1">
            <summary>
            Aggregates all events and statistics for a changeset to help assertions when testing
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
        </member>
        <member name="M:DynamicData.Tests.ChangeSetAggregator`1.#ctor(System.IObservable{DynamicData.IChangeSet{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicData.Tests.ChangeSetAggregator`2"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="P:DynamicData.Tests.ChangeSetAggregator`1.Data">
            <summary>
            A clone of the daata
            </summary>
        </member>
        <member name="P:DynamicData.Tests.ChangeSetAggregator`1.Messages">
            <summary>
            All message received
            </summary>
        </member>
        <member name="P:DynamicData.Tests.ChangeSetAggregator`1.Summary">
            <summary>
            Gets or sets the summary.
            </summary>
        </member>
        <member name="P:DynamicData.Tests.ChangeSetAggregator`1.Error">
            <summary>
            Gets or sets the error.
            </summary>
        </member>
        <member name="M:DynamicData.Tests.ChangeSetAggregator`1.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="T:DynamicData.Tests.ListTextEx">
            <summary>
            Test extensions
            </summary>
        </member>
        <member name="M:DynamicData.Tests.ListTextEx.AsAggregator``1(System.IObservable{DynamicData.IChangeSet{``0}})">
            <summary>
            Aggregates all events and statistics for a paged changeset to help assertions when testing
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <returns></returns>
        </member>
        <member name="T:DynamicData.Tests.ChangeSetAggregator`2">
            <summary>
            Aggregates all events and statistics for a changeset to help assertions when testing
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
        </member>
        <member name="M:DynamicData.Tests.ChangeSetAggregator`2.#ctor(System.IObservable{DynamicData.IChangeSet{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicData.Tests.ChangeSetAggregator`2"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="P:DynamicData.Tests.ChangeSetAggregator`2.Data">
            <summary>
            Gets the data.
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="P:DynamicData.Tests.ChangeSetAggregator`2.Messages">
            <summary>
            Gets the messages.
            </summary>
            <value>
            The messages.
            </value>
        </member>
        <member name="P:DynamicData.Tests.ChangeSetAggregator`2.Summary">
            <summary>
            Gets the summary.
            </summary>
            <value>
            The summary.
            </value>
        </member>
        <member name="P:DynamicData.Tests.ChangeSetAggregator`2.Error">
            <summary>
            Gets the error.
            </summary>
            <value>
            The error.
            </value>
        </member>
        <member name="M:DynamicData.Tests.ChangeSetAggregator`2.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:DynamicData.Tests.DistinctChangeSetAggregator`1">
            <summary>
            Aggregates all events and statistics for a distinct changeset to help assertions when testing
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:DynamicData.Tests.DistinctChangeSetAggregator`1.#ctor(System.IObservable{DynamicData.IDistinctChangeSet{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicData.Tests.DistinctChangeSetAggregator`1"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="P:DynamicData.Tests.DistinctChangeSetAggregator`1.Data">
            <summary>
            Gets the data.
            </summary>
        </member>
        <member name="P:DynamicData.Tests.DistinctChangeSetAggregator`1.Messages">
            <summary>
            Gets the messages.
            </summary>
        </member>
        <member name="P:DynamicData.Tests.DistinctChangeSetAggregator`1.Summary">
            <summary>
            Gets the summary.
            </summary>
        </member>
        <member name="P:DynamicData.Tests.DistinctChangeSetAggregator`1.Error">
            <summary>
            Gets the error.
            </summary>
            <value>
            The error.
            </value>
        </member>
        <member name="M:DynamicData.Tests.DistinctChangeSetAggregator`1.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="T:DynamicData.Tests.PagedChangeSetAggregator`2">
            <summary>
            Aggregates all events and statistics for a paged changeset to help assertions when testing
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
        </member>
        <member name="M:DynamicData.Tests.PagedChangeSetAggregator`2.#ctor(System.IObservable{DynamicData.IPagedChangeSet{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicData.Tests.PagedChangeSetAggregator`2"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="P:DynamicData.Tests.PagedChangeSetAggregator`2.Data">
            <summary>
            The data of the steam cached inorder to apply assertions
            </summary>
        </member>
        <member name="P:DynamicData.Tests.PagedChangeSetAggregator`2.Messages">
            <summary>
            Record of all received messages.
            </summary>
            <value>
            The messages.
            </value>
        </member>
        <member name="P:DynamicData.Tests.PagedChangeSetAggregator`2.Summary">
            <summary>
            The aggregated change summary.
            </summary>
            <value>
            The summary.
            </value>
        </member>
        <member name="P:DynamicData.Tests.PagedChangeSetAggregator`2.Error">
            <summary>
            Gets and error.
            </summary>
            <value>
            The error.
            </value>
        </member>
        <member name="M:DynamicData.Tests.PagedChangeSetAggregator`2.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="T:DynamicData.Tests.SortedChangeSetAggregator`2">
            <summary>
            Aggregates all events and statistics for a sorted changeset to help assertions when testing
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
        </member>
        <member name="M:DynamicData.Tests.SortedChangeSetAggregator`2.#ctor(System.IObservable{DynamicData.ISortedChangeSet{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicData.Tests.SortedChangeSetAggregator`2"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="P:DynamicData.Tests.SortedChangeSetAggregator`2.Data">
            <summary>
            The data of the steam cached inorder to apply assertions
            </summary>
        </member>
        <member name="P:DynamicData.Tests.SortedChangeSetAggregator`2.Messages">
            <summary>
            Record of all received messages.
            </summary>
            <value>
            The messages.
            </value>
        </member>
        <member name="P:DynamicData.Tests.SortedChangeSetAggregator`2.Summary">
            <summary>
            The aggregated change summary.
            </summary>
            <value>
            The summary.
            </value>
        </member>
        <member name="P:DynamicData.Tests.SortedChangeSetAggregator`2.Error">
            <summary>
            Gets and error.
            </summary>
        </member>
        <member name="M:DynamicData.Tests.SortedChangeSetAggregator`2.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="T:DynamicData.Tests.TestEx">
            <summary>
            Test extensions
            </summary>
        </member>
        <member name="M:DynamicData.Tests.TestEx.AsAggregator``2(System.IObservable{DynamicData.IChangeSet{``0,``1}})">
            <summary>
            Aggregates all events and statistics for a paged changeset to help assertions when testing
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.Tests.TestEx.AsAggregator``1(System.IObservable{DynamicData.IDistinctChangeSet{``0}})">
            <summary>
            Aggregates all events and statistics for a distinct changeset to help assertions when testing
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="source">The source.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:DynamicData.Tests.TestEx.AsAggregator``2(System.IObservable{DynamicData.ISortedChangeSet{``0,``1}})">
            <summary>
            Aggregates all events and statistics for a sorted changeset to help assertions when testing
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:DynamicData.Tests.TestEx.AsAggregator``2(System.IObservable{DynamicData.IVirtualChangeSet{``0,``1}})">
             <summary>
            Aggregates all events and statistics for a virtual changeset to help assertions when testing
             </summary>
             <typeparam name="TObject">The type of the object.</typeparam>
             <typeparam name="TKey">The type of the key.</typeparam>
             <param name="source">The source.</param>
             <returns></returns>
             <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:DynamicData.Tests.TestEx.AsAggregator``2(System.IObservable{DynamicData.IPagedChangeSet{``0,``1}})">
            <summary>
            Aggregates all events and statistics for a paged changeset to help assertions when testing
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="T:DynamicData.Tests.VirtualChangeSetAggregator`2">
            <summary>
            Aggregates all events and statistics for a virtual changeset to help assertions when testing
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
        </member>
        <member name="M:DynamicData.Tests.VirtualChangeSetAggregator`2.#ctor(System.IObservable{DynamicData.IVirtualChangeSet{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicData.Tests.VirtualChangeSetAggregator`2"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="P:DynamicData.Tests.VirtualChangeSetAggregator`2.Data">
            <summary>
            Gets the data.
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="P:DynamicData.Tests.VirtualChangeSetAggregator`2.Messages">
            <summary>
            Gets the messages.
            </summary>
            <value>
            The messages.
            </value>
        </member>
        <member name="P:DynamicData.Tests.VirtualChangeSetAggregator`2.Summary">
            <summary>
            Gets the summary.
            </summary>
            <value>
            The summary.
            </value>
        </member>
        <member name="P:DynamicData.Tests.VirtualChangeSetAggregator`2.Error">
            <summary>
            Gets the error.
            </summary>
            <value>
            The error.
            </value>
        </member>
        <member name="M:DynamicData.Tests.VirtualChangeSetAggregator`2.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:DynamicData.ObservableCacheEx">
            <summary>
            The entry point for the dynamic data sub system
            </summary>
        </member>
        <member name="M:DynamicData.ObservableCacheEx.ToObservableChangeSet``1(System.IObservable{``0},System.Func{``0,System.Nullable{System.TimeSpan}},System.Int32,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Converts the observable to an observable changeset. The items are uniquely identified by the hashcode
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="source">The source.</param>
            <param name="expireAfter">Specify on a per object level the maximum time before an object expires from a cache</param>
            <param name="limitSizeTo">Remove the oldest items when the size has reached this limit</param>
            <param name="scheduler">The scheduler (only used for time expiry).</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source
            or
            keySelector</exception>
        </member>
        <member name="M:DynamicData.ObservableCacheEx.ToObservableChangeSet``2(System.IObservable{``0},System.Func{``0,``1},System.Func{``0,System.Nullable{System.TimeSpan}},System.Int32,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Converts the observable to an observable changeset
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="keySelector">The key selector.</param>
            <param name="expireAfter">Specify on a per object level the maximum time before an object expires from a cache</param>
            <param name="limitSizeTo">Remove the oldest items when the size has reached this limit</param>
            <param name="scheduler">The scheduler (only used for time expiry).</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source
            or
            keySelector</exception>
        </member>
        <member name="M:DynamicData.ObservableCacheEx.ToObservableChangeSet``1(System.IObservable{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Nullable{System.TimeSpan}},System.Int32,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Converts the observable to an observable changeset
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="source">The source.</param>
            <param name="expireAfter">Specify on a per object level the maximum time before an object expires from a cache</param>
            <param name="limitSizeTo">Remove the oldest items when the size has reached this limit</param>
            <param name="scheduler">The scheduler (only used for time expiry).</param>
            <returns>An observable changeset</returns>
            <exception cref="T:System.ArgumentNullException">source
            or
            keySelector</exception>
        </member>
        <member name="M:DynamicData.ObservableCacheEx.ToObservableChangeSet``2(System.IObservable{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1},System.Func{``0,System.Nullable{System.TimeSpan}},System.Int32,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Converts the observable to an observable changeset
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="keySelector">The key selector.</param>
            <param name="expireAfter">Specify on a per object level the maximum time before an object expires from a cache</param>
            <param name="limitSizeTo">Remove the oldest items when the size has reached this limit</param>
            <param name="scheduler">The scheduler (only used for time expiry).</param>
            <returns>An observable changeset</returns>
            <exception cref="T:System.ArgumentNullException">source
            or
            keySelector</exception>
        </member>
        <member name="M:DynamicData.ObservableCacheEx.PopulateInto``2(System.IObservable{DynamicData.IChangeSet{``0,``1}},DynamicData.ISourceCache{``0,``1})">
            <summary>
            Populates a source into the specified cache.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="detination">The detination.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            source
            or
            detination
            </exception>
        </member>
        <member name="M:DynamicData.ObservableCacheEx.PopulateInto``2(System.IObservable{DynamicData.IChangeSet{``0,``1}},DynamicData.IIntermediateCache{``0,``1})">
            <summary>
            Populates a source into the specified cache
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="detination">The detination.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source
            or
            detination</exception>
        </member>
        <member name="M:DynamicData.ObservableCacheEx.PopulateFrom``2(DynamicData.ISourceCache{``0,``1},System.IObservable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Populate a cache from an obserable stream.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="observable">The observable.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            source
            or
            keySelector
            </exception>
        </member>
        <member name="M:DynamicData.ObservableCacheEx.PopulateFrom``2(DynamicData.ISourceCache{``0,``1},System.IObservable{``0})">
            <summary>
            Populate a cache from an obserable stream.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="observable">The observable.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            source
            or
            keySelector
            </exception>
        </member>
        <member name="M:DynamicData.ObservableCacheEx.AsObservableCache``2(DynamicData.IObservableCache{``0,``1})">
            <summary>
            Converts the source to an read only observable cache
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:DynamicData.ObservableCacheEx.AsObservableCache``2(System.IObservable{DynamicData.IChangeSet{``0,``1}})">
            <summary>
            Converts the source to an read only observable cache
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:DynamicData.ObservableCacheEx.Connect``2(DynamicData.IObservableCache{``0,``1},DynamicData.Controllers.FilterController{``0})">
            <summary>
            Creates a stream using the specified controlled filter.
            The controlled filter enables dynamic inline changing of the filter.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="filterController">The controlled filter.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">filterController</exception>
        </member>
        <member name="M:DynamicData.ObservableCacheEx.LimitSizeTo``2(DynamicData.ISourceCache{``0,``1},System.Int32,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Limits the number of records in the cache to the size specified.  When the size is reached
            the oldest items are removed from the cache
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="sizeLimit">The size limit.</param>
            <param name="scheduler">The scheduler.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source</exception>
            <exception cref="T:System.ArgumentException">Size limit must be greater than zero</exception>
        </member>
        <member name="M:DynamicData.ObservableCacheEx.ExpireAfter``2(DynamicData.ISourceCache{``0,``1},System.Func{``0,System.Nullable{System.TimeSpan}},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Automatically removes items from the cache after the time specified by
            the time selector elapses. 
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The cache.</param>
            <param name="timeSelector">The time selector.  Return null if the item should never be removed</param>
            <param name="scheduler">The scheduler to perform the work on.</param>
            <returns>An observable of anumerable of the kev values which has been removed</returns>
            <exception cref="T:System.ArgumentNullException">source
            or
            timeSelector</exception>
        </member>
        <member name="M:DynamicData.ObservableCacheEx.ExpireAfter``2(DynamicData.ISourceCache{``0,``1},System.Func{``0,System.Nullable{System.TimeSpan}},System.Nullable{System.TimeSpan})">
            <summary>
            Automatically removes items from the cache after the time specified by
            the time selector elapses. 
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The cache.</param>
            <param name="timeSelector">The time selector.  Return null if the item should never be removed</param>
            <param name="interval">A polling interval.  Since multiple timer subscriptions can be expensive,
            it may be worth setting the interval .
            </param>
            <returns>An observable of anumerable of the kev values which has been removed</returns>
            <exception cref="T:System.ArgumentNullException">source
            or
            timeSelector</exception>
        </member>
        <member name="M:DynamicData.ObservableCacheEx.ExpireAfter``2(DynamicData.ISourceCache{``0,``1},System.Func{``0,System.Nullable{System.TimeSpan}},System.Nullable{System.TimeSpan},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Automatically removes items from the cache after the time specified by
            the time selector elapses. 
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The cache.</param>
            <param name="timeSelector">The time selector.  Return null if the item should never be removed</param>
            <param name="pollingInterval">A polling interval.  Since multiple timer subscriptions can be expensive,
            it may be worth setting the interval.
            </param>
            <param name="scheduler">The scheduler.</param>
            <returns>An observable of anumerable of the kev values which has been removed</returns>
            <exception cref="T:System.ArgumentNullException">source
            or
            timeSelector</exception>
        </member>
        <member name="M:DynamicData.ObservableCacheEx.AddOrUpdate``2(DynamicData.ISourceCache{``0,``1},``0)">
            <summary>
            Adds or updates the cache with the specified item.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="item">The item.</param>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:DynamicData.ObservableCacheEx.AddOrUpdate``2(DynamicData.ISourceCache{``0,``1},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            <summary>
            Adds or updates the cache with the specified items.
            </summary>
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="items">The items.</param>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:DynamicData.ObservableCacheEx.Remove``2(DynamicData.ISourceCache{``0,``1},``0)">
            <summary>
            Removes the specified item from the cache. 
            
            If the item is not contained in the cache then the operation does nothing.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="item">The item.</param>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:DynamicData.ObservableCacheEx.Remove``2(DynamicData.ISourceCache{``0,``1},``1)">
            <summary>
            Removes the specified key from the cache.
            If the item is not contained in the cache then the operation does nothing.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="key">The key.</param>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:DynamicData.ObservableCacheEx.RemoveKey``2(DynamicData.ISourceCache{``0,``1},``1)">
            <summary>
            Removes the specified key from the cache.
            If the item is not contained in the cache then the operation does nothing.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="key">The key.</param>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:DynamicData.ObservableCacheEx.Remove``2(DynamicData.ISourceCache{``0,``1},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Removes the specified items from the cache. 
            
            Any items not contained in the cache are ignored
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="items">The items.</param>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:DynamicData.ObservableCacheEx.Remove``2(DynamicData.ISourceCache{``0,``1},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Removes the specified keys from the cache. 
            
            Any keys not contained in the cache are ignored
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="keys">The keys.</param>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:DynamicData.ObservableCacheEx.RemoveKeys``2(DynamicData.ISourceCache{``0,``1},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Removes the specified keys from the cache. 
            
            Any keys not contained in the cache are ignored
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="keys">The keys.</param>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:DynamicData.ObservableCacheEx.Clear``2(DynamicData.ISourceCache{``0,``1})">
            <summary>
            Clears all data
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:DynamicData.ObservableCacheEx.Evaluate``2(DynamicData.ISourceCache{``0,``1},``0)">
            <summary>
            Signal observers to re-evaluate the specified item.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="item">The item.</param>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:DynamicData.ObservableCacheEx.Evaluate``2(DynamicData.ISourceCache{``0,``1},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Signal observers to re-evaluate the specified items.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="items">The items.</param>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:DynamicData.ObservableCacheEx.Remove``2(DynamicData.IIntermediateCache{``0,``1},``1)">
            <summary>
            Removes the specified key from the cache.
            If the item is not contained in the cache then the operation does nothing.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="key">The key.</param>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:DynamicData.ObservableCacheEx.Remove``2(DynamicData.IIntermediateCache{``0,``1},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Removes the specified keys from the cache. 
            
            Any keys not contained in the cache are ignored
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="keys">The keys.</param>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:DynamicData.ObservableCacheEx.Clear``2(DynamicData.IIntermediateCache{``0,``1})">
            <summary>
            Clears all items from the cache
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="T:DynamicData.IndexedItem`2">
            <summary>
            An item with it's index
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
        </member>
        <member name="M:DynamicData.IndexedItem`2.#ctor(`0,`1,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicData.IndexedItem`2"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="key">The key.</param>
            <param name="index">The index.</param>
        </member>
        <member name="P:DynamicData.IndexedItem`2.Index">
            <summary>
            Gets the index.
            </summary>
        </member>
        <member name="P:DynamicData.IndexedItem`2.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="P:DynamicData.IndexedItem`2.Key">
            <summary>
            Gets the key.
            </summary>
        </member>
        <member name="M:DynamicData.IndexedItem`2.Equals(DynamicData.IndexedItem{`0,`1})">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.IndexedItem`2.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DynamicData.IndexedItem`2.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:DynamicData.IndexedItem`2.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:DynamicData.Operators.IPageRequest">
            <summary>
            Represents a new page request
            </summary>
        </member>
        <member name="P:DynamicData.Operators.IPageRequest.Page">
            <summary>
            The page to move to
            </summary>
        </member>
        <member name="P:DynamicData.Operators.IPageRequest.Size">
            <summary>
            The page size
            </summary>
        </member>
        <member name="T:DynamicData.Operators.IPageResponse">
            <summary>
            Response from the pagation operator
            </summary>
        </member>
        <member name="P:DynamicData.Operators.IPageResponse.PageSize">
            <summary>
            The size of the page.
            </summary>
        </member>
        <member name="P:DynamicData.Operators.IPageResponse.Page">
            <summary>
            The current page
            </summary>
        </member>
        <member name="P:DynamicData.Operators.IPageResponse.Pages">
            <summary>
            Total number of pages.
            </summary>
        </member>
        <member name="P:DynamicData.Operators.IPageResponse.TotalSize">
            <summary>
            The total number of records in the underlying cache
            </summary>
        </member>
        <member name="T:DynamicData.Operators.SortOptimisations">
            <summary>
            Flags used to specify one or more sort optimisations
            </summary>
        </member>
        <member name="F:DynamicData.Operators.SortOptimisations.None">
            <summary>
            No sorting optimisation are applied
            </summary>
        </member>
        <member name="F:DynamicData.Operators.SortOptimisations.ComparesImmutableValuesOnly">
            <summary>
            Specify this option if the comparer used for sorting compares immutable fields only.
            In which case index changes can be calculated using BinarySearch rather than the expensive IndexOf
            </summary>
        </member>
        <member name="F:DynamicData.Operators.SortOptimisations.IgnoreEvaluates">
            <summary>
            Ignores moves because of evaluates.  
            Use for virtualisatiom or pagination
            </summary>
        </member>
        <member name="F:DynamicData.Operators.SortOptimisations.InsertAtEndThenSort">
            <summary>
            The insert at end then sort entire set.  This can be the best algorthm for large datasets with many changes
            </summary>
        </member>
        <member name="M:DynamicData.PagedChangeSet`2.Equals(DynamicData.PagedChangeSet{`0,`1})">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.PagedChangeSet`2.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the SortedItems <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the SortedItems <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:DynamicData.PageRequest">
            <summary>
            Represents a new page request
            </summary>
        </member>
        <member name="F:DynamicData.PageRequest.Default">
            <summary>
            The default page request
            </summary>
        </member>
        <member name="F:DynamicData.PageRequest.Empty">
            <summary>
            Represents an empty page
            </summary>
        </member>
        <member name="M:DynamicData.PageRequest.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicData.PageRequest"/> class.
            </summary>
            <param name="page">The page.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:DynamicData.PageRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="P:DynamicData.PageRequest.Page">
            <summary>
            The page to move to
            </summary>
        </member>
        <member name="P:DynamicData.PageRequest.Size">
            <summary>
            The page size
            </summary>
        </member>
        <member name="M:DynamicData.PageRequest.Equals(DynamicData.Operators.IPageRequest)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.PageRequest.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param>
        </member>
        <member name="M:DynamicData.PageRequest.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:DynamicData.PageRequest.DefaultComparer">
            <summary>
            Gets the default comparer.
            </summary>
            <value>
            The default comparer.
            </value>
        </member>
        <member name="M:DynamicData.PageRequest.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:DynamicData.PageResponse.Equals(DynamicData.Operators.IPageResponse)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:DynamicData.PageResponse.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param>
        </member>
        <member name="M:DynamicData.PageResponse.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:DynamicData.PageResponse.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:DynamicData.SortReason">
            <summary>
            The reason why the sorted collection has changed
            </summary>
        </member>
        <member name="F:DynamicData.SortReason.InitialLoad">
            <summary>
            The collection has loaded for the first time.
            </summary>
        </member>
        <member name="F:DynamicData.SortReason.ComparerChanged">
            <summary>
            The comparer used to sort has changed 
            </summary>
        </member>
        <member name="F:DynamicData.SortReason.DataChanged">
            <summary>
            The data changed
            </summary>
        </member>
        <member name="F:DynamicData.SortReason.Reorder">
            <summary>
            Sorting has been reapplied
            </summary>
        </member>
        <member name="F:DynamicData.SortReason.Reset">
            <summary>
            A large number of changes has been received and the reset threshold has been exceeded.
            The entire set has been resorted without moves being calculated
            </summary>
        </member>
        <member name="M:DynamicData.Virtualiser`2.Virtualise(DynamicData.IVirtualRequest)">
            <summary>
            Virtualises using specified parameters.  Returns null if there are no changed
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="T:DynamicData.VirtualRequest">
            <summary>
            A request object for virtualisation
            </summary>
        </member>
        <member name="F:DynamicData.VirtualRequest.Default">
            <summary>
            The default request value
            </summary>
        </member>
        <member name="M:DynamicData.VirtualRequest.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicData.VirtualRequest"/> class.
            </summary>
            <param name="startIndex">The start index.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:DynamicData.VirtualRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicData.VirtualRequest"/> class.
            </summary>
        </member>
        <member name="P:DynamicData.VirtualRequest.Size">
            <summary>
            The maximumn number of items to return
            </summary>
        </member>
        <member name="P:DynamicData.VirtualRequest.StartIndex">
            <summary>
            The first index in the virualised list
            </summary>
        </member>
        <member name="P:DynamicData.VirtualRequest.StartIndexSizeComparer">
            <summary>
            Gets the start index size comparer.
            </summary>
            <value>
            The start index size comparer.
            </value>
        </member>
        <member name="M:DynamicData.VirtualRequest.Equals(DynamicData.IVirtualRequest)">
            <summary>
                Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
                true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:DynamicData.VirtualRequest.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
            <returns>
                true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:DynamicData.VirtualRequest.GetHashCode">
            <summary>
                Serves as a hash function for a particular type.
            </summary>
            <returns>
                A hash code for the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="M:DynamicData.VirtualRequest.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:DynamicData.VirtualResponse">
            <summary>
            Defines values used to virtualise the result set
            </summary>
        </member>
        <member name="P:DynamicData.VirtualResponse.Size">
            <summary>
            The requested size of the virtualised data
            </summary>
        </member>
        <member name="P:DynamicData.VirtualResponse.StartIndex">
            <summary>
            The starting index
            </summary>
        </member>
        <member name="P:DynamicData.VirtualResponse.TotalSize">
            <summary>
            Gets the total size of the underlying cache
            </summary>
        </member>
        <member name="M:DynamicData.VirtualResponse.Equals(DynamicData.IVirtualResponse)">
            <summary>
                Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
                true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:DynamicData.VirtualResponse.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
            <returns>
                true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:DynamicData.VirtualResponse.GetHashCode">
            <summary>
                Serves as a hash function for a particular type.
            </summary>
            <returns>
                A hash code for the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="M:DynamicData.VirtualResponse.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:DynamicData.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage
            </summary>
            <example><code>
            [CanBeNull] public object Test() { return null; }
            public void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code></example>
        </member>
        <member name="T:DynamicData.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>
            </summary>
            <example><code>
            [NotNull] public object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code></example>
        </member>
        <member name="T:DynamicData.Annotations.ItemNotNullAttribute">
            <summary>
            Indicates that collection or enumerable value does not contain null elements
            </summary>
        </member>
        <member name="T:DynamicData.Annotations.ItemCanBeNullAttribute">
            <summary>
            Indicates that collection or enumerable value can contain null elements
            </summary>
        </member>
        <member name="T:DynamicData.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form
            </summary>
            <example><code>
            [StringFormatMethod("message")]
            public void ShowError(string message, params object[] args) { /* do something */ }
            public void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code></example>
        </member>
        <member name="M:DynamicData.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:DynamicData.Annotations.ValueProviderAttribute">
            <summary>
            For a parameter that is expected to be one of the limited set of values.
            Specify fields of which type should be used as values for this parameter.
            </summary>
        </member>
        <member name="T:DynamicData.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException"/>
            </summary>
            <example><code>
            public void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code></example>
        </member>
        <member name="T:DynamicData.Annotations.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <c>System.ComponentModel.INotifyPropertyChanged</c> interface and this method
             is used to notify that some property value changed
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example><code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               private string _name;
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:DynamicData.Annotations.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted.<br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same)
            for method output means that the methos doesn't return normally.<br/>
            <c>canbenull</c> annotation is only applicable for output parameters.<br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row,
            or use single attribute with rows separated by semicolon.<br/>
            </syntax>
            <examples><list>
            <item><code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null,
            // and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data) 
            </code></item>
            <item><code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list></examples>
        </member>
        <member name="T:DynamicData.Annotations.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not
            </summary>
            <example><code>
            [LocalizationRequiredAttribute(true)]
            public class Foo {
              private string str = "my string"; // Warning: Localizable string
            }
            </code></example>
        </member>
        <member name="T:DynamicData.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
            <example><code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            class UsesNoEquality {
              public void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code></example>
        </member>
        <member name="T:DynamicData.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
            <example><code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute { }
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent { }
            </code></example>
        </member>
        <member name="T:DynamicData.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly
            (e.g. via reflection, in external library), so this symbol
            will not be marked as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="T:DynamicData.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper
            to not mark symbols marked with such attributes as unused
            (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:DynamicData.Annotations.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used</summary>
        </member>
        <member name="F:DynamicData.Annotations.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member</summary>
        </member>
        <member name="F:DynamicData.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:DynamicData.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type</summary>
        </member>
        <member name="T:DynamicData.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly when marked
            with <see cref="T:DynamicData.Annotations.MeansImplicitUseAttribute"/> or <see cref="T:DynamicData.Annotations.UsedImplicitlyAttribute"/>
            </summary>
        </member>
        <member name="F:DynamicData.Annotations.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used</summary>
        </member>
        <member name="F:DynamicData.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used</summary>
        </member>
        <member name="T:DynamicData.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used
            </summary>
        </member>
        <member name="T:DynamicData.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled
            when the invoked method is on stack. If the parameter is a delegate,
            indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated
            while the method is executed
            </summary>
        </member>
        <member name="T:DynamicData.Annotations.PureAttribute">
            <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>
            </summary>
            <example><code>
            [Pure] private int Multiply(int x, int y) { return x * y; }
            public void Foo() {
              const int a = 2, b = 2;
              Multiply(a, b); // Waring: Return value of pure method is not used
            }
            </code></example>
        </member>
        <member name="T:DynamicData.Annotations.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder within a web project.
            Path can be relative or absolute, starting from web root (~)
            </summary>
        </member>
        <member name="T:DynamicData.Annotations.AspMvcActionAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:DynamicData.Annotations.AspMvcAreaAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:DynamicData.Annotations.AspMvcControllerAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is
            an MVC controller. If applied to a method, the MVC controller name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>
            </summary>
        </member>
        <member name="T:DynamicData.Annotations.AspMvcMasterAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, String)</c>
            </summary>
        </member>
        <member name="T:DynamicData.Annotations.AspMvcModelTypeAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, Object)</c>
            </summary>
        </member>
        <member name="T:DynamicData.Annotations.AspMvcPartialViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is an MVC
            partial view. If applied to a method, the MVC partial view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:DynamicData.Annotations.AspMvcSupressViewErrorAttribute">
            <summary>
            ASP.NET MVC attribute. Allows disabling inspections for MVC views within a class or a method
            </summary>
        </member>
        <member name="T:DynamicData.Annotations.AspMvcDisplayTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:DynamicData.Annotations.AspMvcEditorTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:DynamicData.Annotations.AspMvcTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>
            </summary>
        </member>
        <member name="T:DynamicData.Annotations.AspMvcViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c>
            </summary>
        </member>
        <member name="T:DynamicData.Annotations.AspMvcActionSelectorAttribute">
            <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name
            </summary>
            <example><code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code></example>
        </member>
        <member name="T:DynamicData.Annotations.RazorSectionAttribute">
            <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>
            </summary>
        </member>
        <member name="T:DynamicData.Annotations.CollectionAccessAttribute">
            <summary>
            Indicates how method invocation affects content of the collection
            </summary>
        </member>
        <member name="F:DynamicData.Annotations.CollectionAccessType.None">
            <summary>Method does not use or modify content of the collection</summary>
        </member>
        <member name="F:DynamicData.Annotations.CollectionAccessType.Read">
            <summary>Method only reads content of the collection but does not modify it</summary>
        </member>
        <member name="F:DynamicData.Annotations.CollectionAccessType.ModifyExistingContent">
            <summary>Method can change content of the collection but does not add new elements</summary>
        </member>
        <member name="F:DynamicData.Annotations.CollectionAccessType.UpdatedContent">
            <summary>Method can add new elements to the collection</summary>
        </member>
        <member name="T:DynamicData.Annotations.AssertionMethodAttribute">
            <summary>
            Indicates that the marked method is assertion method, i.e. it halts control flow if
            one of the conditions is satisfied. To set the condition, mark one of the parameters with 
            <see cref="T:DynamicData.Annotations.AssertionConditionAttribute"/> attribute
            </summary>
        </member>
        <member name="T:DynamicData.Annotations.AssertionConditionAttribute">
            <summary>
            Indicates the condition parameter of the assertion method. The method itself should be
            marked by <see cref="T:DynamicData.Annotations.AssertionMethodAttribute"/> attribute. The mandatory argument of
            the attribute is the assertion type.
            </summary>
        </member>
        <member name="T:DynamicData.Annotations.AssertionConditionType">
            <summary>
            Specifies assertion type. If the assertion method argument satisfies the condition,
            then the execution continues. Otherwise, execution is assumed to be halted
            </summary>
        </member>
        <member name="F:DynamicData.Annotations.AssertionConditionType.IS_TRUE">
            <summary>Marked parameter should be evaluated to true</summary>
        </member>
        <member name="F:DynamicData.Annotations.AssertionConditionType.IS_FALSE">
            <summary>Marked parameter should be evaluated to false</summary>
        </member>
        <member name="F:DynamicData.Annotations.AssertionConditionType.IS_NULL">
            <summary>Marked parameter should be evaluated to null value</summary>
        </member>
        <member name="F:DynamicData.Annotations.AssertionConditionType.IS_NOT_NULL">
            <summary>Marked parameter should be evaluated to not null value</summary>
        </member>
        <member name="T:DynamicData.Annotations.TerminatesProgramAttribute">
            <summary>
            Indicates that the marked method unconditionally terminates control flow execution.
            For example, it could unconditionally throw exception
            </summary>
        </member>
        <member name="T:DynamicData.Annotations.LinqTunnelAttribute">
            <summary>
            Indicates that method is pure LINQ method, with postponed enumeration (like Enumerable.Select,
            .Where). This annotation allows inference of [InstantHandle] annotation for parameters
            of delegate type by analyzing LINQ method chains.
            </summary>
        </member>
        <member name="T:DynamicData.Annotations.NoEnumerationAttribute">
            <summary>
            Indicates that IEnumerable, passed as parameter, is not enumerated.
            </summary>
        </member>
        <member name="T:DynamicData.Annotations.RegexPatternAttribute">
            <summary>
            Indicates that parameter is regular expression pattern.
            </summary>
        </member>
        <member name="T:DynamicData.Annotations.XamlItemsControlAttribute">
            <summary>
            XAML attribute. Indicates the type that has <c>ItemsSource</c> property and should be
            treated as <c>ItemsControl</c>-derived type, to enable inner  items <c>DataContext</c>
            type resolve.
            </summary>
        </member>
        <member name="T:DynamicData.Annotations.XamlItemBindingOfItemsControlAttribute">
            <summary>
            XAML attibute. Indicates the property of some <c>BindingBase</c>-derived type, that
            is used to bind some item of <c>ItemsControl</c>-derived type. This annotation will
            enable the <c>DataContext</c> type resolve for XAML bindings for such properties.
            </summary>
            <remarks>
            Property should have the tree ancestor of the <c>ItemsControl</c> type or
            marked with the <see cref="T:DynamicData.Annotations.XamlItemsControlAttribute"/> attribute.
            </remarks>
        </member>
        <member name="T:DynamicData.Annotations.NoReorder">
            <summary>
            Prevents the Member Reordering feature from tossing members of the marked class.
            </summary>
            <remarks>
            The attribute must be mentioned in your member reordering patterns.
            </remarks>
        </member>
        <member name="T:DynamicData.SourceCache`2">
            <summary>
            An observable cache which exposes an update API.  Used at the root
            of all observable chains
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
        </member>
        <member name="M:DynamicData.SourceCache`2.#ctor(System.Func{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicData.SourceCache`2"/> class.
            </summary>
            <param name="keySelector">The key selector.</param>
            <exception cref="T:System.ArgumentNullException">keySelector</exception>
        </member>
        <member name="M:DynamicData.SourceCache`2.BatchUpdate(System.Action{DynamicData.ISourceUpdater{`0,`1}})">
            <summary>
            Add, update and remove api via an action method. Enables the consumer to perform queries and updates
            safely within the innner caches lock.
            
            The result of the action will produce appropriate notifications.
            </summary>
            <param name="updateAction">The update action.</param>
        </member>
        <member name="P:DynamicData.SourceCache`2.CountChanged">
            <summary>
            A count changed observable starting with the current count
            </summary>
        </member>
        <member name="M:DynamicData.SourceCache`2.Connect(System.Func{`0,System.Boolean})">
            <summary>
            Returns a filtered stream of cache changes preceeded with the initital filtered state
            </summary>
            <param name="filter">The filter.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.SourceCache`2.Connect">
            <summary>
            Returns a observable of cache changes preceeded with the initital cache state
            </summary>
            <returns></returns>
        </member>
        <member name="M:DynamicData.SourceCache`2.Watch(`1)">
            <summary>
            Returns an observable of any changes which match the specified key,  preceeded with the initital cache state
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="P:DynamicData.SourceCache`2.Count">
            <summary>
            The total count of cached items
            </summary>
        </member>
        <member name="P:DynamicData.SourceCache`2.Items">
            <summary>
            Gets the Items
            </summary>
        </member>
        <member name="P:DynamicData.SourceCache`2.KeyValues">
            <summary>
            Gets the key value pairs
            </summary>
        </member>
        <member name="P:DynamicData.SourceCache`2.Keys">
            <summary>
            Gets the keys
            </summary>
        </member>
        <member name="M:DynamicData.SourceCache`2.Lookup(`1)">
            <summary>
            Lookup a single item using the specified key.
            </summary>
            <remarks>
            Fast indexed lookup
            </remarks>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicData.SourceCache`2.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
    </members>
</doc>
